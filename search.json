[{"title":"C++ Primer 第十三章练习题","url":"http://yuncry.me/2017/02/23/C-Primer-第十三章练习题/","content":"<h1 id=\"nbsp-13-1-1节练习\"><a href=\"#nbsp-13-1-1节练习\" class=\"headerlink\" title=\"&nbsp;13.1.1节练习\"></a>&nbsp;13.1.1节练习</h1><h2 id=\"nbsp-练习13-1\"><a href=\"#nbsp-练习13-1\" class=\"headerlink\" title=\"&nbsp;练习13.1\"></a>&nbsp;练习13.1</h2><blockquote>\n<p>拷贝构造函数是什么？什么时候使用它？</p>\n</blockquote>\n<p>第一个参数是自身类类型的引用（一般是const），且任何额外参数都有默认值的构造函数是拷贝构造函数。</p>\n<ul>\n<li>使用=定义变量时</li>\n<li>作为实参传递给一个非引用类型的形参</li>\n<li>在一个返回类型为非引用类型的函数中返回一个对象</li>\n<li>某些类类型对它们所分配的对象使用拷贝初始化，比如push、insert。</li>\n</ul>\n<h2 id=\"nbsp-练习13-2\"><a href=\"#nbsp-练习13-2\" class=\"headerlink\" title=\"&nbsp;练习13.2\"></a>&nbsp;练习13.2</h2><blockquote>\n<p>解释为什么下面的声明是非法的：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sales_data::Sales_data (Sales_data rhs);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>为了调用拷贝构造函数，我们需要拷贝实参，为了拷贝实参，又需要调用拷贝构造函数,无限循环。</p>\n<h2 id=\"nbsp-练习13-4\"><a href=\"#nbsp-练习13-4\" class=\"headerlink\" title=\"&nbsp;练习13.4\"></a>&nbsp;练习13.4</h2><blockquote>\n<p>假定Point是一个类类型，它有一个public的拷贝构造函数，指出下面程序片段中哪些地方使用了拷贝构造函数：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Point global;</div><div class=\"line\"><span class=\"function\">Point <span class=\"title\">foo_bar</span><span class=\"params\">(Point arg)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    Point local = arg, *heap = <span class=\"keyword\">new</span> Point(global);</div><div class=\"line\">    *heap = local;</div><div class=\"line\">    Point pa[<span class=\"number\">4</span>] = &#123; local, *heap &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> *heap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>Point global;<br>Point foo_bar(Point arg) // 1<br>{<br>    Point local = arg, *heap = new Point(global); // 2, 3<br>    *heap = local;<br>    Point pa[4] = { local, *heap }; // 4, 5<br>    return *heap; // 6<br>}</p>\n<h2 id=\"nbsp-练习13-5\"><a href=\"#nbsp-练习13-5\" class=\"headerlink\" title=\"&nbsp;练习13.5\"></a>&nbsp;练习13.5</h2><blockquote>\n<p>给定下面的类框架，编写一个拷贝构造函数，拷贝所有成员。你的构造函数应该动态分配一个新的string，并将对象拷贝到ps指向的位置，而不是拷贝ps本身：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> HasPtr &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    HasPtr(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s = <span class=\"built_in\">string</span>()):</div><div class=\"line\">        ps(<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(s), i(<span class=\"number\">0</span>) &#123;&#125;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"built_in\">string</span> *ps;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>HasPtr (const HasPtr&amp; rhs):<br>    ps(new string(*rhs.ps), i(rhs.i) {}</p>\n<h1 id=\"nbsp-13-1-2节练习\"><a href=\"#nbsp-13-1-2节练习\" class=\"headerlink\" title=\"&nbsp;13.1.2节练习\"></a>&nbsp;13.1.2节练习</h1><h2 id=\"nbsp-练习13-6\"><a href=\"#nbsp-练习13-6\" class=\"headerlink\" title=\"&nbsp;练习13.6\"></a>&nbsp;练习13.6</h2><blockquote>\n<p>拷贝赋值运算符是什么？什么时候使用它？合成拷贝赋值运算符完成什么工作？什么时候会生成合成拷贝赋值运算符？</p>\n</blockquote>\n<p>拷贝赋值运算符是一个名为operator=的函数，通常返回一个指向其左侧运算对象的引用。<br>给对象赋值时使用。<br>它将右侧运算对象的每个非static成员赋予左侧运算对象的对应成员，这一工作是通过成员类型的拷贝赋值运算符来完成的。<br>如果一个类为定义自己的拷贝赋值运算符，那么编译器会为其生成一个合成拷贝赋值运算符。</p>\n<h2 id=\"nbsp-练习13-8\"><a href=\"#nbsp-练习13-8\" class=\"headerlink\" title=\"&nbsp;练习13.8\"></a>&nbsp;练习13.8</h2><blockquote>\n<p>为HasPtr类编写赋值运算符。类似拷贝构造函数，你的赋值运算符应该将对象拷贝到ps指向的位置。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">HasPtr&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Foo &amp;rhs) &#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(*rhs.ps);</div><div class=\"line\">    <span class=\"keyword\">delete</span> ps;</div><div class=\"line\">    ps = p;</div><div class=\"line\">    i = rhs.i;</div><div class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"nbsp-13-1-3节练习\"><a href=\"#nbsp-13-1-3节练习\" class=\"headerlink\" title=\"&nbsp;13.1.3节练习\"></a>&nbsp;13.1.3节练习</h1><h2 id=\"nbsp-练习13-9\"><a href=\"#nbsp-练习13-9\" class=\"headerlink\" title=\"&nbsp;练习13.9\"></a>&nbsp;练习13.9</h2><blockquote>\n<p>析构函数是什么？合成析构函数完成什么工作？什么时候会生成合成析构函数？</p>\n</blockquote>\n<p>析构函数是类的一个成员函数，名字由波浪线接类名构成，没有返回值，不接受参数。析构函数释放对象使用的资源，销毁对象的非static数据成员。当一个类未定义自己的析构函数时，编译器会为它定义一个合成析构函数。</p>\n<h2 id=\"nbsp-练习13-11\"><a href=\"#nbsp-练习13-11\" class=\"headerlink\" title=\"&nbsp;练习13.11\"></a>&nbsp;练习13.11</h2><blockquote>\n<p>为前面练习中的HasPtr类添加一个析构函数。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">~HasPtr() &#123;</div><div class=\"line\">    <span class=\"keyword\">delete</span> sp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"nbsp-练习13-12\"><a href=\"#nbsp-练习13-12\" class=\"headerlink\" title=\"&nbsp;练习13.12\"></a>&nbsp;练习13.12</h2><blockquote>\n<p>在下面的代码片段中会发生几次析构函数调用？<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool fcn(const Sales_data *trans, Sales_data accum) &#123;</div><div class=\"line\">    Sales_data item1(*trans), item2(accum);</div><div class=\"line\">    return item1.isbn() != item2.isbn();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>三次。函数结束后，item1、item2、accum离开作用域被销毁。</p>\n<h2 id=\"nbsp-练习13-13\"><a href=\"#nbsp-练习13-13\" class=\"headerlink\" title=\"&nbsp;练习13.13\"></a>&nbsp;练习13.13</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> X &#123;</div><div class=\"line\">    X() &#123;<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"X () \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;&#125;</div><div class=\"line\">    X(<span class=\"keyword\">const</span> X&amp;) &#123;<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"X (const &amp;X)\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;&#125;</div><div class=\"line\">    ~X() &#123;<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"~X()\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;&#125;</div><div class=\"line\">    X&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> X&amp;) &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"X&amp; operator=(const X&amp;)\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span> <span class=\"params\">(<span class=\"keyword\">const</span> X&amp; rhs,X rx)</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;X&gt; xv;</div><div class=\"line\">    xv.reserve(<span class=\"number\">2</span>);</div><div class=\"line\">    xv.push_back(rhs);</div><div class=\"line\">    xv.push_back(rx);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    X x;</div><div class=\"line\">    X *ps = <span class=\"keyword\">new</span> X(x);</div><div class=\"line\">    fun(*ps,*ps);</div><div class=\"line\">    <span class=\"keyword\">delete</span> ps;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"nbsp-13-1-4节练习\"><a href=\"#nbsp-13-1-4节练习\" class=\"headerlink\" title=\"&nbsp;13.1.4节练习\"></a>&nbsp;13.1.4节练习</h1><h2 id=\"nbsp-练习13-14\"><a href=\"#nbsp-练习13-14\" class=\"headerlink\" title=\"&nbsp;练习13.14\"></a>&nbsp;练习13.14</h2><blockquote>\n<p>假定numbered是一个类，它有一个默认构造函数，能为每一个对象生成一个唯一的序号，保存在名为mysn的数据成员中。假定numbered使用合成的拷贝控制成员，并给定如下函数：<br>    void f(numbered s) {cout &lt;&lt; s.mysn &lt;&lt; endl;}<br>则下面代码输出什么内容？<br>    numbered a, b=a, c=a;<br>    f(a); f(b); f(c);</p>\n</blockquote>\n<p>输出三个相同的值，a的序号。</p>\n<blockquote>\n<p>假定numbered定义了一个拷贝构造函数，能生成一个新的序号。这会改变上一题中调用的结果吗？如果会改变，为什么？新的输出结果是什么？</p>\n</blockquote>\n<p>会改变。但输出结果不是a、b、c的序号，是形参s在三次调用下不同的序号。</p>\n<h2 id=\"nbsp-练习13-16\"><a href=\"#nbsp-练习13-16\" class=\"headerlink\" title=\"&nbsp;练习13.16\"></a>&nbsp;练习13.16</h2><blockquote>\n<p>如果f中的参数是const numbered&amp;，将会怎样？这会改变输出结果吗？如果会改变，为什么？新的输出结果是什么？</p>\n</blockquote>\n<p>会改变。这次将输出a、b、c自身的序号。</p>\n<h2 id=\"nbsp-练习13-17\"><a href=\"#nbsp-练习13-17\" class=\"headerlink\" title=\"&nbsp;练习13.17\"></a>&nbsp;练习13.17</h2><blockquote>\n<p>分别编写前三题中所描述的numbered和f，验证你是否正确预测了输出结果。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 13.14</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">struct</span> numbered &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> x;</div><div class=\"line\">    <span class=\"keyword\">int</span> mysn;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num; </div><div class=\"line\">    numbered () &#123;mysn = num++;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> numbered::num = <span class=\"number\">1000</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(numbered s)</span> </span>&#123;<span class=\"built_in\">cout</span> &lt;&lt; s.mysn &lt;&lt; <span class=\"built_in\">endl</span>;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    numbered a, b=a, c=b;</div><div class=\"line\">    f(a); f(b); f(c);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//output</span></div><div class=\"line\"><span class=\"comment\">//1000</span></div><div class=\"line\"><span class=\"comment\">//1000</span></div><div class=\"line\"><span class=\"comment\">//1000</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 13.15</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">struct</span> numbered &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> x;</div><div class=\"line\">    <span class=\"keyword\">int</span> mysn;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num; </div><div class=\"line\">    numbered () &#123;mysn = num++;&#125;</div><div class=\"line\">\tnumbered (<span class=\"keyword\">const</span> numbered&amp; rhs) &#123;mysn = num++; x = rhs.x;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> numbered::num = <span class=\"number\">1000</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(numbered s)</span> </span>&#123;<span class=\"built_in\">cout</span> &lt;&lt; s.mysn &lt;&lt; <span class=\"built_in\">endl</span>;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    numbered a, b=a, c=b;</div><div class=\"line\">    f(a); f(b); f(c);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//output</span></div><div class=\"line\"><span class=\"comment\">//1003</span></div><div class=\"line\"><span class=\"comment\">//1004</span></div><div class=\"line\"><span class=\"comment\">//1005</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 13.16</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">struct</span> numbered &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> x;</div><div class=\"line\">    <span class=\"keyword\">int</span> mysn;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num; </div><div class=\"line\">    numbered () &#123;mysn = num++;&#125;</div><div class=\"line\">\tnumbered (<span class=\"keyword\">const</span> numbered&amp; rhs) &#123;mysn = num++; x = rhs.x;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> numbered::num = <span class=\"number\">1000</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(numbered &amp;s)</span> </span>&#123;<span class=\"built_in\">cout</span> &lt;&lt; s.mysn &lt;&lt; <span class=\"built_in\">endl</span>;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    numbered a, b=a, c=b;</div><div class=\"line\">    f(a); f(b); f(c);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//output</span></div><div class=\"line\"><span class=\"comment\">//1000</span></div><div class=\"line\"><span class=\"comment\">//1001</span></div><div class=\"line\"><span class=\"comment\">//1002</span></div></pre></td></tr></table></figure>\n<h1 id=\"nbsp-13-1-6节练习\"><a href=\"#nbsp-13-1-6节练习\" class=\"headerlink\" title=\"&nbsp;13.1.6节练习\"></a>&nbsp;13.1.6节练习</h1><h2 id=\"nbsp-练习13-18\"><a href=\"#nbsp-练习13-18\" class=\"headerlink\" title=\"&nbsp;练习13.18\"></a>&nbsp;练习13.18</h2><blockquote>\n<p>定义一个Employee类，它包含雇员的姓名和唯一的雇员证号。为这个类定义默认构造函数，以及接受一个表示雇员姓名的string的构造函数。每个构造函数应该通过递增一个static数据成员来生成一个唯一的账号。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Employee &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    Employee();</div><div class=\"line\">    Employee(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"built_in\">string</span> name;</div><div class=\"line\">    <span class=\"keyword\">int</span> id;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Employee::num = <span class=\"number\">10000</span>;</div><div class=\"line\"></div><div class=\"line\">Employee::Employee() &#123;</div><div class=\"line\">    id = num++;</div><div class=\"line\">&#125;</div><div class=\"line\">Employee::Employee(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;str): name(str) &#123;</div><div class=\"line\">    id = num++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"nbsp-练习13-19\"><a href=\"#nbsp-练习13-19\" class=\"headerlink\" title=\"&nbsp;练习13.19\"></a>&nbsp;练习13.19</h2><blockquote>\n<p>你的Employee类需要定义它自己的拷贝控制成员吗？如果需要，为什么？如果不需要，为什么？实现你认为Employee需要的拷贝控制成员。</p>\n</blockquote>\n<p>不需要，因为每个雇员都是唯一的，不存在拷贝。因此应该阻止拷贝。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Employee &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    Employee();</div><div class=\"line\">    Employee(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp;);</div><div class=\"line\">\tEmployee(<span class=\"keyword\">const</span> Employee&amp;) = <span class=\"keyword\">delete</span>;</div><div class=\"line\">\tEmployee&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Employee&amp;) = <span class=\"keyword\">delete</span>;\t</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"built_in\">string</span> name;</div><div class=\"line\">    <span class=\"keyword\">int</span> id;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Employee::num = <span class=\"number\">10000</span>;</div><div class=\"line\"></div><div class=\"line\">Employee::Employee() &#123;</div><div class=\"line\">    id = num++;</div><div class=\"line\">&#125;</div><div class=\"line\">Employee::Employee(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;str): name(str) &#123;</div><div class=\"line\">    id = num++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"nbsp-练习13-21\"><a href=\"#nbsp-练习13-21\" class=\"headerlink\" title=\"&nbsp;练习13.21\"></a>&nbsp;练习13.21</h2><blockquote>\n<p>你认为TextQuery和QueryResult类需要定义它们自己版本的拷贝控制成员吗？如果需要，为什么？如果不需要，为什么？实现你认为这两个类需要的拷贝控制操作。</p>\n</blockquote>\n<p>不需要。自己合成的版本能满足所有应有的条件，不需要再定义。而且拷贝TextQuery和QueryResult对象没有意义，可以阻止拷贝。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//query.h</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> QueryResult;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> TextQuery &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;::size_type lineNo;</div><div class=\"line\">    TextQuery(ifstream&amp;);</div><div class=\"line\">    <span class=\"function\">QueryResult <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp;)</span> <span class=\"keyword\">const</span></span>;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; lines;</div><div class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">set</span>&lt;lineNo&gt;&gt;&gt; result;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> QueryResult &#123;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">friend</span> ostream&amp; <span class=\"title\">print</span><span class=\"params\">(ostream&amp;, <span class=\"keyword\">const</span> QueryResult&amp;)</span></span>;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    QueryResult(<span class=\"built_in\">string</span> s, <span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; pvs,</div><div class=\"line\">                <span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">set</span>&lt;TextQuery::lineNo&gt;&gt; psl):</div><div class=\"line\">           word(s), lines(pvs), nos(psl) &#123;&#125;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"built_in\">string</span> word;</div><div class=\"line\">    <span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; lines;</div><div class=\"line\">    <span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">set</span>&lt;TextQuery::lineNo&gt;&gt; nos;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">ostream &amp;<span class=\"title\">print</span><span class=\"params\">(ostream&amp;, <span class=\"keyword\">const</span> QueryResult&amp;)</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//query.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"query.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cctype&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\">TextQuery::TextQuery(ifstream &amp;is) : lines(<span class=\"keyword\">new</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;) &#123;</div><div class=\"line\">    lineNo No&#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">string</span> line; getline(is,line); ++No) &#123;</div><div class=\"line\">        lines-&gt;push_back(line);</div><div class=\"line\">        <span class=\"function\"><span class=\"built_in\">istringstream</span> <span class=\"title\">lineStream</span><span class=\"params\">(line)</span></span>; </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">string</span> text,word; lineStream &gt;&gt; text; word.clear()) &#123;</div><div class=\"line\">            remove_copy_if(text.begin(),text.end(),back_inserter(word),</div><div class=\"line\">                           [](<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> &amp;c)&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">ispunct</span>(c);&#125;);</div><div class=\"line\">            <span class=\"keyword\">auto</span> &amp;nos = result[word];</div><div class=\"line\">            <span class=\"keyword\">if</span>(!nos)</div><div class=\"line\">                nos.reset(<span class=\"keyword\">new</span> <span class=\"built_in\">set</span>&lt;lineNo&gt;);</div><div class=\"line\">            nos-&gt;insert(No);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">QueryResult TextQuery::query(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;word) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">set</span>&lt;lineNo&gt;&gt; noDate(<span class=\"keyword\">new</span> <span class=\"built_in\">set</span>&lt;lineNo&gt;);</div><div class=\"line\">    <span class=\"keyword\">auto</span> findResult = result.find(word);</div><div class=\"line\">    <span class=\"keyword\">if</span> (findResult == result.end())</div><div class=\"line\">        <span class=\"keyword\">return</span> QueryResult(word,lines,noDate);</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"keyword\">return</span> QueryResult(word,lines,findResult-&gt;second);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">ostream &amp;<span class=\"title\">print</span><span class=\"params\">(ostream &amp;os, <span class=\"keyword\">const</span> QueryResult &amp;qr)</span> </span>&#123;</div><div class=\"line\">    os &lt;&lt; qr.word &lt;&lt; <span class=\"string\">\" occurs \"</span> &lt;&lt; qr.nos-&gt;size() </div><div class=\"line\">       &lt;&lt; (qr.nos-&gt;size()&gt;<span class=\"number\">1</span> ? <span class=\"string\">\" times\"</span> : <span class=\"string\">\" time\"</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : *qr.nos)</div><div class=\"line\">        os &lt;&lt; <span class=\"string\">\"\\t(line \"</span>&lt;&lt; i+<span class=\"number\">1</span> &lt;&lt;<span class=\"string\">\") \"</span> &lt;&lt; qr.lines-&gt;at(i) &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\">    <span class=\"keyword\">return</span> os;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"nbsp-13-2节练习\"><a href=\"#nbsp-13-2节练习\" class=\"headerlink\" title=\"&nbsp;13.2节练习\"></a>&nbsp;13.2节练习</h1><h2 id=\"nbsp-练习13-22\"><a href=\"#nbsp-练习13-22\" class=\"headerlink\" title=\"&nbsp;练习13.22\"></a>&nbsp;练习13.22</h2><blockquote>\n<p>假定我们希望HasPtr的行为像一个值。即，对于对象所指向的string成员，每个对象都有一份自己的拷贝。为HasPtr编写拷贝构造函数和拷贝赋值运算符。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> HasPtr &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    HasPtr(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;str = <span class=\"built_in\">string</span>()):</div><div class=\"line\">        ps(<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(str)), i(<span class=\"number\">0</span>) &#123;&#125;</div><div class=\"line\">    HasPtr(<span class=\"keyword\">const</span> HasPtr &amp;p):</div><div class=\"line\">        ps(<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(*p.ps)), i(p.i) &#123;&#125;</div><div class=\"line\">    HasPtr&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> HasPtr&amp;); </div><div class=\"line\">    ~HasPtr() &#123;<span class=\"keyword\">delete</span> ps;&#125;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"built_in\">string</span> *ps;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">HasPtr&amp; HasPtr::<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> HasPtr &amp;rhs) &#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> tmp = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(*rhs.ps);</div><div class=\"line\">    <span class=\"keyword\">delete</span> ps;</div><div class=\"line\">    ps = tmp;</div><div class=\"line\">    i = rhs.i;</div><div class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["C++"],"tags":["C++ Primer"]},{"title":"C++ Primer 第十章练习题","url":"http://yuncry.me/2017/02/20/C-Primer-第十章练习题/","content":"<h1 id=\"nbsp-10-1节练习\"><a href=\"#nbsp-10-1节练习\" class=\"headerlink\" title=\"&nbsp;10.1节练习\"></a>&nbsp;10.1节练习</h1><h2 id=\"nbsp-练习10-1-10-2\"><a href=\"#nbsp-练习10-1-10-2\" class=\"headerlink\" title=\"&nbsp;练习10.1, 10.2\"></a>&nbsp;练习10.1, 10.2</h2><blockquote>\n<p>10.1:头文件algorithm中定义了一个名为count的函数，它类似find，接受一对迭代器和一个值作为参数。count返回给定值在序列中出现的次数。编写程序，读取int序列存入vector中，打印有多少个元素的值等于给定值。<br>10.2:重做上一题，但读取string序列存入list中。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; iv = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; count(iv.cbegin(), iv.cend(),<span class=\"number\">2</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">list</span>&lt;<span class=\"built_in\">string</span>&gt; il = &#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"aa\"</span>,<span class=\"string\">\"aa\"</span>,<span class=\"string\">\"aaa\"</span>&#125;; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; count(il.cbegin(), il.cend(),<span class=\"string\">\"aa\"</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"nbsp-10-2-1节练习\"><a href=\"#nbsp-10-2-1节练习\" class=\"headerlink\" title=\"&nbsp;10.2.1节练习\"></a>&nbsp;10.2.1节练习</h1><h2 id=\"nbsp-练习10-3\"><a href=\"#nbsp-练习10-3\" class=\"headerlink\" title=\"&nbsp;练习10.3\"></a>&nbsp;练习10.3</h2><blockquote>\n<p>用accumulate求一个vector&lt;int>中的元素之和。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; iv = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; accumulate(iv.cbegin(), iv.cend(),<span class=\"number\">0</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"nbsp-练习10-4\"><a href=\"#nbsp-练习10-4\" class=\"headerlink\" title=\"&nbsp;练习10.4\"></a>&nbsp;练习10.4</h2><blockquote>\n<p>假定v是一个vector&lt;double>, 那么调用accumulate(v.cbegin(),v.cend(),0)有何错误？</p>\n</blockquote>\n<p>由于accumulate的第三个参数的类型决定了函数中使用哪个加法以及返回值的类型，上述运算中，小数部分会被舍弃。</p>\n<h2 id=\"nbsp-练习10-5\"><a href=\"#nbsp-练习10-5\" class=\"headerlink\" title=\"&nbsp;练习10.5\"></a>&nbsp;练习10.5</h2><blockquote>\n<p>在本节对名册调用equal的例子中，如果两个名册中保存的都是C风格字符串而不是string，会发生什么？</p>\n</blockquote>\n<p>用==比较两个char*对象，只是检查指针值是否相等。</p>\n<h1 id=\"nbsp-练习10-2-2节练习\"><a href=\"#nbsp-练习10-2-2节练习\" class=\"headerlink\" title=\"&nbsp;练习10.2.2节练习\"></a>&nbsp;练习10.2.2节练习</h1><h2 id=\"nbsp-练习10-6\"><a href=\"#nbsp-练习10-6\" class=\"headerlink\" title=\"&nbsp;练习10.6\"></a>&nbsp;练习10.6</h2><blockquote>\n<p>编写程序，使用fill_n将一个序列中的int值都设置为0。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; iv = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>｝；</div><div class=\"line\">\tfill_n(iv.cbegin(),iv.size(),<span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;i : iv)</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"nbsp-练习10-7\"><a href=\"#nbsp-练习10-7\" class=\"headerlink\" title=\"&nbsp;练习10.7\"></a>&nbsp;练习10.7</h2><blockquote>\n<p>下面程序是否有错误？如果有，请改正</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// (a)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</div><div class=\"line\"><span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt; lst;</div><div class=\"line\"><span class=\"keyword\">int</span> i;</div><div class=\"line\"><span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; i)</div><div class=\"line\">\tlst.push_back(i);</div><div class=\"line\">copy(lst.cbegin(), lst.cend(), vec.begin());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//错误在于vec是个空容器，向空容器写值的行为未定义。</span></div><div class=\"line\"><span class=\"comment\">//可在copy函数前加一条语句　　vec.resize(lst.size());</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// (b)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</div><div class=\"line\">vec.reserve(<span class=\"number\">10</span>);</div><div class=\"line\">fill_n(vec.begin(), <span class=\"number\">10</span>, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//没错误，但是没意义。</span></div><div class=\"line\"><span class=\"comment\">//虽然vec有能存下10个int的内存空间，但是依然没有元素，fill_n不起作用。</span></div></pre></td></tr></table></figure>\n<h2 id=\"nbsp-练习10-8\"><a href=\"#nbsp-练习10-8\" class=\"headerlink\" title=\"&nbsp;练习10.8\"></a>&nbsp;练习10.8</h2><blockquote>\n<p>本节提到过，标准库算法不会改变它们所操作的容器的大小。为什么使用back_inserter不会使这一断言失效？</p>\n</blockquote>\n<p>back_inserter不属于算法的操作，它是容器定义的操作。</p>\n","categories":["C++"],"tags":["C++ Primer"]},{"title":"POJ 1797 Heavy Transportation","url":"http://yuncry.me/2017/02/18/POJ-1797-Heavy-Transportation/","content":"<p><strong>DESCRIPTION</strong><br>Background<br>Hugo Heavy is happy. After the breakdown of the Cargolifter project he can now expand business. But he needs a clever man who tells him whether there really is a way from the place his customer has build his giant steel crane to the place where it is needed on which all streets can carry the weight.<br>Fortunately he already has a plan of the city with all streets and bridges and all the allowed weights.Unfortunately he has no idea how to find the the maximum weight capacity in order to tell his customer how heavy the crane may become. But you surely know. </p>\n<p>Problem<br>You are given the plan of the city, described by the streets (with weight limits) between the crossings, which are numbered from 1 to n. Your task is to find the maximum weight that can be transported from crossing 1 (Hugo’s place) to crossing n (the customer’s place). You may assume that there is at least one path. All streets can be travelled in both directions.</p>\n<p><strong>INPUT</strong><br>The first line contains the number of scenarios (city plans). For each city the number <em>n</em> of street crossings (1 &lt;= n &lt;= 1000) and number <em>m</em> of streets are given on the first line. The following m lines contain triples of integers specifying start and end crossing of the street and the maximum allowed weight, which is positive and not larger than 1000000. There will be at most one street between each pair of crossings.</p>\n<p><strong>OUTPUT</strong><br>The output for every scenario begins with a line containing “Scenario #i:”, where i is the number of the scenario starting at 1. Then print a single line containing the maximum allowed weight that Hugo can transport to the customer. Terminate the output for the scenario with a blank line.</p>\n<p><strong>SAMPLE</strong><br><em>Input</em><br>1<br>3 　3<br>1 　2　 3<br>1 　3 　4<br>2 　3　 5<br><em>Output</em><br>Scenario #1:<br>4</p>\n<p>题意：运送货物。总共有N个城市，M条道路，每条道路都有最大承重量。找一条1到N的路径，在货物重量不超过道路的最大承重量的情况下，使货物重量尽可能的大。</p>\n<p>思路：我最开始想到的方法是Dijkstra,变形一下，改变d[i]的意义来做这道题。这道题若用Dijkstra来解，d[i]表示从城市1到城市n中所有可行路径中最小权值边的最大值（比如map[1][2]=2,map[2][3]=4,map[1][3]=3,则d[3]＝3）。先贴出实现代码。需要注意一下d[1]的值。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_N = <span class=\"number\">1005</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">1e9</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; iiP;</div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">map</span>[MAX_N][MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> d[MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> N,M,T;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(d,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(d));</div><div class=\"line\">    priority_queue&lt;iiP&gt; que;</div><div class=\"line\">    d[s] = INF;</div><div class=\"line\">    que.push(iiP(INF,s));</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">while</span>(!que.empty()) &#123;</div><div class=\"line\">        iiP now = que.top();</div><div class=\"line\">        que.pop();</div><div class=\"line\">        <span class=\"keyword\">int</span> v = now.second;</div><div class=\"line\">        <span class=\"keyword\">if</span> (d[v] &gt; now.first) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>; i&lt;=N; ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (d[i] &lt; min(d[v],<span class=\"built_in\">map</span>[v][i])) &#123;</div><div class=\"line\">                d[i] = min(d[v],<span class=\"built_in\">map</span>[v][i]);</div><div class=\"line\">                que.push(iiP(d[i],i));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t=<span class=\"number\">1</span>; t&lt;=T; ++t) &#123;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(<span class=\"built_in\">map</span>,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">map</span>));</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;M);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>; k&lt;M; ++k) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> a,b,c;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;a,&amp;b,&amp;c);</div><div class=\"line\">            <span class=\"built_in\">map</span>[a][b] = <span class=\"built_in\">map</span>[b][a] = c;</div><div class=\"line\">        &#125;</div><div class=\"line\">        Dijkstra(<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Scenario #%d:\\n%d\\n\\n\"</span>,t,d[N]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"nbsp\"><a href=\"#nbsp\" class=\"headerlink\" title=\"&nbsp;\"></a>&nbsp;</h2><p>虽然AC了，但是写代码的过程中觉得思路有点绕，不够清晰，而且因为初始值设置不对或者判断条件不对WA了很多发。后来觉得用最小（大）生成树来解这道题会更直白清晰。利用Kruskal，按各条路的最大承重量从大到小排列，依次加入并查集，每次判断1和N是否在一个集合，若是，则当前边权值为答案。（此处RE过一次，边数组开小了）<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_N = <span class=\"number\">1005</span>;</div><div class=\"line\"><span class=\"keyword\">struct</span> Edge &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> u,v,len;</div><div class=\"line\">&#125;es[MAX_N*MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> N,M;</div><div class=\"line\"><span class=\"keyword\">int</span> par[MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> grade[MAX_N];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span> <span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; ++i) &#123;</div><div class=\"line\">        par[i] = i;</div><div class=\"line\">        grade[i] = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span> <span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x == par[x])</div><div class=\"line\">        <span class=\"keyword\">return</span> x;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"keyword\">return</span> par[x] = find(par[x]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unite</span> <span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">     x = find(x);</div><div class=\"line\">     y = find(y);</div><div class=\"line\">    <span class=\"keyword\">if</span> (x==y)  <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (grade[x] &lt; grade[y])</div><div class=\"line\">        par[x] = y;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        par[y] = x;</div><div class=\"line\">        <span class=\"keyword\">if</span> (grade[x] == grade[y])</div><div class=\"line\">            ++grade[x];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">same</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123; <span class=\"keyword\">return</span> find(x)==find(y); &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">EdgeCmp</span> <span class=\"params\">(Edge &amp;e1, Edge &amp;e2)</span> </span>&#123; <span class=\"keyword\">return</span> e1.len &gt; e2.len; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Kruskal</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    sort(es,es+M,EdgeCmp);</div><div class=\"line\">    init(N);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;M; ++i) &#123;</div><div class=\"line\">        Edge &amp;e = es[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (!same(e.v,e.u)) &#123;</div><div class=\"line\">            unite(e.v,e.u);</div><div class=\"line\">            <span class=\"keyword\">if</span> (same(<span class=\"number\">1</span>,N))</div><div class=\"line\">                <span class=\"keyword\">return</span> e.len;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> T;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t=<span class=\"number\">1</span>; t&lt;=T; ++t) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;M);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m=<span class=\"number\">0</span>; m&lt;M; ++m)</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;es[m].u, &amp;es[m].v, &amp;es[m].len);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Scenario #%d:\\n%d\\n\\n\"</span>,t,Kruskal());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&nbsp;<br>&nbsp;</p>\n","categories":["ACM解题报告"],"tags":["最短路径","并查集","最小生成树"]},{"title":"POJ 2139 Six Degrees of Cowvin Bacon","url":"http://yuncry.me/2017/02/17/POJ-2139-Six-Degrees-of-Cowvin-Bacon/","content":"<p><strong>DESCRIPTION</strong><br>The cows have been making movies lately, so they are ready to play a variant of the famous game “Six Degrees of Kevin Bacon”. </p>\n<p>The game works like this: each cow is considered to be zero degrees of separation (degrees) away from herself. If two distinct cows have been in a movie together, each is considered to be one ‘degree’ away from the other. If a two cows have never worked together but have both worked with a third cow, they are considered to be two ‘degrees’ away from each other (counted as: one degree to the cow they’ve worked with and one more to the other cow). This scales to the general case. </p>\n<p>The <em>N</em> (2 &lt;= N &lt;= 300) cows are interested in figuring out which cow has the smallest average degree of separation from all the other cows. excluding herself of course. The cows have made <em>M</em> (1 &lt;= M &lt;= 10000) movies and it is guaranteed that some relationship path exists between every pair of cows.</p>\n<p><strong>INPUT</strong></p>\n<ul>\n<li><p>Line 1: Two space-separated integers: <em>N</em> and <em>M</em> </p>\n</li>\n<li><p>Lines 2..M+1: Each input line contains a set of two or more space-separated integers that describes the cows appearing in a single movie. The first integer is the number of cows participating in the described movie, (e.g., Mi); the subsequent Mi integers tell which cows were. </p>\n</li>\n</ul>\n<p><strong>OUTPUT</strong><br>A single integer that is 100 times the shortest mean degree of separation of any of the cows.</p>\n<p><strong>SAMPLE</strong><br><em>Input</em><br>4　 2<br>3 　1　 2　 3<br>2 　3 　4<br><em>Output</em><br>100</p>\n<p><strong>NOTE</strong><br>Cow 3 has worked with all the other cows and thus has degrees of separation: 1, 1, and 1 – a mean of 1.00 .</p>\n<p>题意：N只牛拍了M部电影，曾在一起拍过电影的牛之间相互距离为１，假设a与b没有一起拍过，但是a与c拍过，b与c也拍过，则a与b距离为２，以此类推。求某只牛与其他所有牛距离平均值的一百倍（要求最小值）。</p>\n<p>思路：用Floyd求图中任意两点间的最小值，最后遍历所有点，比较出最短距离和。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_N = <span class=\"number\">305</span>, INF = <span class=\"number\">1e9</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> d[MAX_N][MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> appear[MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> N,M;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Floyd</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>; k&lt;=N; ++k)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=N; ++j)</div><div class=\"line\">                d[i][j] = min(d[i][j],d[i][k]+d[k][j]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;M);</div><div class=\"line\">    <span class=\"built_in\">memset</span>(d,<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span>(d));</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i)</div><div class=\"line\">        d[i][i] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(M--) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> a;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;a; ++i)</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;appear[i]);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;a; ++i)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>; j&lt;a; ++j) &#123;</div><div class=\"line\">                d[appear[i]][appear[j]] = <span class=\"number\">1</span>;</div><div class=\"line\">                d[appear[j]][appear[i]] = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Floyd();</div><div class=\"line\">    <span class=\"keyword\">int</span> ans = INF;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=N; ++j) </div><div class=\"line\">            sum += d[i][j];</div><div class=\"line\">        ans = min(ans,sum);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,<span class=\"number\">100</span>*ans/(N<span class=\"number\">-1</span>));</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>\n","categories":["ACM解题报告"],"tags":["最短路径"]},{"title":"如果可以，让我抱抱你","url":"http://yuncry.me/2017/02/17/如果可以，让我抱抱你/","content":"<blockquote>\n<p>   辅导员在寒假前布置了寒假作业，一份调查问卷，总结大一与大二第一学年，并对未来两年写一些规划。这份作业我拖了很久，因为在“就业”和“考研”的问题上我很犹豫。昨天辅导员终于忍不住又发了一遍通知。今天有空，于是就写了。写着写着就跑偏了，写着写着就泪目了。以下是我的答案。</p>\n</blockquote>\n<p>进入大学之前，有认真想过在大学要好好学习课堂知识，拿奖学金，争取保研资格，这也一直是父母对我的期望。带着这样的想法，我也就坚持了半学期。我很佩服那些对某课程一点兴趣都没有，却能拿高分的优秀同学。曾经为了高考，我可以，现在的我做不到。或许是没有了硬性的压力？或许真的是自己变懒了。大一学年，有很多课程平时没去听，考前突击，能拿到90左右的分数。带着这样的侥幸，大二上学期也就很少去听课，更多的时间是待在图书馆看自己想看的书。因此，大二上学期的成绩崩了。从84降到80.2，大概也谈不上争取保研了。</p>\n<p>其实刚进入大二时，我也猜到这学期可能学得很烂。对课程的厌倦是一直存在的。我不是一个厌倦学习的人，但是我很固执，对自己喜欢的东西非常地执着，对没兴趣的东西根本不愿去管。这很糟糕，父母意识到了，我自己也意识到了。我还没有足够的能力去这样固执。我一直想改，但现在还是这样。</p>\n<p>这份“寒假作业”我拖了很久才交，因为我不知道该怎么选择。其中最大的纠结就是“就业”或“考研”。不仅仅是这份“寒假作业”，在面临其他选择时，我总是犹豫不决。</p>\n<p>我以前一直都是个没有主见的人。我的父母，很温柔，也很强势。从小到大，我是大人们眼中的乖孩子。我被大人们贴上了“懂事听话”、“老实”、“乖”、“从小不用大人们操心”等标签。真的如此吗？</p>\n<p>我可能听话得有点过了。大人们告诉我什么，我就信什么；他们让我做什么，我也会顺从，几乎不反抗，根本不会表露出不愿意。或许这么做，是因为我没主见没有自己的想法。或许我也有自己的想法，但是我害怕被骂，害怕看到他们眼中的失望。我也害怕我的想法是错的，没有自信，总觉得大人们说的话是对的。</p>\n<p>从小到大，我一直为父母着想，一直为每一个人着想，或许表面上我做不了什么，我只是个孩子，但是内心早就翻腾了。母亲是个优秀的女人，可是苦于心中有些愿望一直没有实现，常常当我面自怨自艾，抱怨命运不公，指责父亲的不是。而父亲常常愁眉苦脸的，他很少把心中的不快吐露，一脸冷漠，作为孩子的我最怕这样。小时候，我非常讨厌他们吵架，反反复复地说着家长里短。我从来都不会去劝他们，我只知道，我只要乖乖听话、好好读书，合他们的心意，他们会开心。因此我常常郁郁寡欢，心事太重，凡事都会想很多，瞻前顾后，就是怕别人不开心，怕别人对我失望。也因如此，我不是个容易开心的人。这样一个抑郁的、心事太重的人，能交到多少好朋友呢？父母常劝我要走出去，敞开心扉，做人开心些。。。</p>\n<p>看过很多穿越类型的科幻小说和电影。当时我就想过，如果让我回到过去，我最想做的，就是紧紧地抱住那个“听话懂事”、觉得自己没有资格任性的小男孩，摸着他的头跟他说，去做你想做的，不要经常为了照顾别人的想法而委屈了自己。</p>\n<p>小时候的一些事情到现在仍然记忆犹新。和父母逛街，遇到喜欢的玩具，从来都不会说想要。有一次他们给我订了一种非常难喝的牛奶，我很恶心那个味道，但是我不敢说，把自己关在厕所里偷偷倒掉，被发现后，他们狠狠地骂了我，我变得更加顺从。有一天下大雨，我们一群小孩子在幼儿园等父母来接，教室里的孩子哇哇大哭，我一个人安静地坐在靠窗的位置，望着门口一动不动，这只是一个五岁左右的孩子，这正常？我爱父母，也嫌弃、心疼那个小男孩。</p>\n<p>现在想想，与其说我懂事听话，不如说我畏畏缩缩压抑天性，做事情没有自信，瞻前顾后不够果断，容易把事情越想越复杂，总是在寻求一条最安稳的路？</p>\n<p>回忆过往，初高中老师总会提及这么一句话“你们读书是为了自己，不是为了我”。我读书真的未曾为过自己。我说过我不是一个容易开心的人，我一直想找寻让我人生有色彩的东西。无论是考试得高分还是被老师们夸赞，我一点开心都没有，只是松了口气，这次考试不会让父母失望。一直压抑着自己，很少主动去争取自己想要的东西。除了回报父母，我的努力没有了任何的方向。“让自己变得优秀”这类话我听着挺刺耳的，连追求的东西都没有，这还有什么意义呢。转专业之前，还有几个人能陪着一起上课一起学习，虽然我依然不知道我想要的是什么，生活还是挺充实。转专业后，一个人上下课，一个人吃饭，一个人去操场不停地跑想甩掉空虚感。常常在傍晚时分，一个人坐在自习室，看着天慢慢黑下去，心里寂寞而凄凉，我害怕每天这样生活下去，衰老下去。因此我经常看着自己想看的书，而不去复习学校开设的课程，看着那些课程，我又会禁不住发呆很久，胡思乱想。</p>\n<p>好像说了很多和这份“寒假作业”无关的话。。。</p>\n<p>回到“就业”和“考研”的问题上来。我自己的想法是，争取本科毕业在北京找一家名企，工作两年后回到南方，深圳、上海或广州。我想早点独立，至少不用父母操心我的经济问题，早点有能力提高父母的生活质量。而父母一直坚持让我读完研究生再出去工作，学历高毕竟是个好事情。我们在这道“选择题”上讨论过很多次。读研这件事我也经常考虑。我的圈子比较小，在我接触过的大多数研究生中，要么也是划水度过两三年，要么认真搞研究但是平常的课程仿佛对他们也没有太大的帮助，在我的认知里，读研是学校到社会的缓冲区，可能读研最大的作用是给自己两三年的时间好好思考规划以后的道路，让自己平心静气的，不那么浮躁。要论学到的知识，我觉得在工作中学到的和在学校学到的，还说不准哪个多哪个少。抛开这些功利性的问题，我更喜欢自己养活自己的那种生活。</p>\n<p>大二下学期开始，与CS紧紧相关的课程终于多了，这些课不认真学就真的是自己懒了。除了这些专业课，剩下的任务就是提高自己的技能，另外把英语学好。我的数学学得不差，那么就看自己这一年多点能把自己的专业水平提高到什么程度吧，能直接参加工作最好，不满意的话，考研也不晚。</p>\n","categories":["essay"],"tags":["心情随笔"]},{"title":"POJ 1703 Find them, Catch them","url":"http://yuncry.me/2017/02/16/POJ-1703-Find-them-Catch-them/","content":"<p><strong>DESCRIPTION</strong><br>The police office in Tadu City decides to say ends to the chaos, as launch actions to root up the TWO gangs in the city, Gang Dragon and Gang Snake. However, the police first needs to identify which gang a criminal belongs to. The present question is, given two criminals; do they belong to a same clan? You must give your judgment based on incomplete information. (Since the gangsters are always acting secretly.) </p>\n<p>Assume <em>N</em> (N &lt;= 10^5) criminals are currently in Tadu City, numbered from <em>1 to N</em>. And of course, at least one of them belongs to Gang Dragon, and the same for Gang Snake. You will be given <em>M</em> (M &lt;= 10^5) messages in sequence, which are in the following two kinds: </p>\n<ol>\n<li><p>D [a] [b]<br>where [a] and [b] are the numbers of two criminals, and they belong to different gangs. </p>\n</li>\n<li><p>A [a] [b]<br>where [a] and [b] are the numbers of two criminals. This requires you to decide whether a and b belong to a same gang. </p>\n</li>\n</ol>\n<p><strong>INPUT</strong><br>The first line of the input contains a single integer <em>T</em> (1 &lt;= T &lt;= 20), the number of test cases. Then <em>T</em> cases follow. Each test case begins with a line with two integers <em>N</em> and <em>M</em>, followed by <em>M</em> lines each containing one message as described above.</p>\n<p><strong>OUTPUT</strong><br>For each message “A [a] [b]” in each case, your program should give the judgment based on the information got before. The answers might be one of “In the same gang.”, “In different gangs.” and “Not sure yet.”</p>\n<p><strong>SAMPLE</strong><br><em>Input</em><br>1<br>5　 5<br>A 　1　 2<br>D 　1　 2<br>A 　1　 2<br>D 　2 　4<br>A 　1　 4<br><em>Output</em><br>Not sure yet.<br>In different gangs.<br>In the same gang.</p>\n<p>题意：某城市有两个帮派“龙帮”和“蛇帮”（从名字上就输了好吗…），警察抓到了N名来自这两个帮派的罪犯。题目会给我信息，告诉我哪两个罪犯不属于同一个帮派。再给出两个罪犯，需要我判断是否属于同一个帮派。</p>\n<p>思路：给出一个罪犯的编号<em>i</em>，记<em>i</em>表示该罪犯属于“龙帮”，记<em>i+N</em>表示该罪犯属于“蛇帮”。每当题目给出D[a][b]时，分别记录两种可能情况。利用并查集，同一个集合中的元素同时成立或同时不成立（即合并a与b+N,a+N与b）。最后只要判断两元素是否在同一集合即可。</p>\n<p>这道题有个地方需要注意，输入方式比较坑，我用了两次<em>getchar()</em>解决字符和换行符的问题。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_N = <span class=\"number\">200005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> par[MAX_N],rank[MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> M,N;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span> <span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; ++i) &#123;</div><div class=\"line\">        par[i] = i;</div><div class=\"line\">        rank[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span> <span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (par[x] == x)</div><div class=\"line\">        <span class=\"keyword\">return</span> x;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"keyword\">return</span> par[x] = find(par[x]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unite</span> <span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    x = find(x);</div><div class=\"line\">    y = find(y);</div><div class=\"line\">    <span class=\"keyword\">if</span> (x == y)  <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (rank[x] &lt; rank[y])</div><div class=\"line\">        par[x] = y;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        par[y] = x;</div><div class=\"line\">        <span class=\"keyword\">if</span> (rank[x] == rank[y])</div><div class=\"line\">            ++rank[x];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">same</span> <span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> find(x) == find(y);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> T;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;M);</div><div class=\"line\">        getchar();</div><div class=\"line\">        init(<span class=\"number\">2</span>*N);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;M; ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">char</span> c;</div><div class=\"line\">            <span class=\"keyword\">int</span> a, b;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%c%d%d\"</span>,&amp;c,&amp;a,&amp;b);</div><div class=\"line\">            getchar();</div><div class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"string\">'A'</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (same(a,b))</div><div class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">\"In the same gang.\\n\"</span>);</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (same(a+N,b))</div><div class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">\"In different gangs.\\n\"</span>);</div><div class=\"line\">                <span class=\"keyword\">else</span> </div><div class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Not sure yet.\\n\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                unite(a,b+N);</div><div class=\"line\">                unite(a+N,b);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>　\n　\n　</p>\n","categories":["ACM解题报告"],"tags":["并查集"]},{"title":"POJ 2236 Wireless Network","url":"http://yuncry.me/2017/02/16/POJ-2236-Wireless-Network/","content":"<p><strong>DESCRIPTION</strong><br>An earthquake takes place in Southeast Asia. The ACM (Asia Cooperated Medical team) have set up a wireless network with the lap computers, but an unexpected aftershock attacked, all computers in the network were all broken. The computers are repaired one by one, and the network gradually began to work again. Because of the hardware restricts, each computer can only directly communicate with the computers that are not farther than d meters from it. But every computer can be regarded as the intermediary of the communication between two other computers, that is to say computer A and computer B can communicate if computer A and computer B can communicate directly or there is a computer C that can communicate with both A and B. </p>\n<p>In the process of repairing the network, workers can take two kinds of operations at every moment, repairing a computer, or testing if two computers can communicate. Your job is to answer all the testing operations. </p>\n<p><strong>INPUT</strong><br>The first line contains two integers <em>N</em> and <em>d</em> (1 &lt;= N &lt;= 1001, 0 &lt;= d &lt;= 20000). Here <em>N</em> is the number of computers, which are numbered from <em>1 to N</em>, and <em>D</em> is the maximum distance two computers can communicate directly. In the next N lines, each contains two integers <em>xi</em>, <em>yi</em> (0 &lt;= xi, yi &lt;= 10000), which is the coordinate of N computers. From the (N+1)-th line to the end of input, there are operations, which are carried out one by one. Each line contains an operation in one of following two formats: </p>\n<ol>\n<li>“O p” (1 &lt;= p &lt;= N), which means repairing computer p. </li>\n<li>“S p q” (1 &lt;= p, q &lt;= N), which means testing whether computer p and q can communicate. </li>\n</ol>\n<p>The input will not exceed 300000 lines.</p>\n<p><strong>OUTPUT</strong><br>For each Testing operation, print “SUCCESS” if the two computers can communicate, or “FAIL” if not.</p>\n<p><strong>SAMPLE</strong><br><em>Input</em><br>4  1<br>0  1<br>0  2<br>0  3<br>0  4<br>O  1<br>O  2<br>O  4<br>S  1  4<br>O  3<br>S  1  4<br><em>Output</em><br>FAIL<br>SUCCESS</p>\n<p>题意：给出N台坏了的电脑，编号从1到N。已知两台电脑的最大通信距离。已知所有电脑的坐标。给出两种操作，”O”表示修复某电脑，”S”表示某两台电脑之间能不能正常通信，需要我给出答案。<br>思路：利用并查集。每次修电脑时，将该电脑与之前已经修复好的电脑计算距离，若两台电脑距离不大于最大通信距离，则将它们合并。最后只要判断两台电脑是否在一个集合内即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_N = <span class=\"number\">1005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> par[MAX_N], repaired[MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> N,d;</div><div class=\"line\"><span class=\"keyword\">struct</span> Pos &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> x, y;</div><div class=\"line\">&#125;pos[MAX_N];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span> <span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; ++i)</div><div class=\"line\">        par[i] = i;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span> <span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (par[x] == x)</div><div class=\"line\">        <span class=\"keyword\">return</span> x;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"keyword\">return</span> par[x] = find(par[x]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unite</span> <span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    x = find(x);</div><div class=\"line\">    y = find(y);</div><div class=\"line\">    <span class=\"keyword\">if</span> (x==y) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> par[x] = y;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">same</span> <span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> find(x) == find(y);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">distance</span> <span class=\"params\">(<span class=\"keyword\">const</span> Pos &amp;pos1, <span class=\"keyword\">const</span> Pos &amp;pos2)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(<span class=\"keyword\">double</span>((pos1.x-pos2.x)*(pos1.x-pos2.x))+</div><div class=\"line\">\t\t<span class=\"keyword\">double</span>((pos1.y-pos2.y)*(pos1.y-pos2.y)));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;d);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i)</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;pos[i].x, &amp;pos[i].y);</div><div class=\"line\">    init(N);</div><div class=\"line\">    <span class=\"keyword\">char</span> c;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%c%d\"</span>,&amp;c,&amp;a)!=EOF) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">'O'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;cnt; ++i) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (distance(pos[a],pos[repaired[i]]) &lt;= d) </div><div class=\"line\">                    unite(a,repaired[i]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            repaired[cnt++] = a;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">'S'</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;b);</div><div class=\"line\">            <span class=\"keyword\">if</span> (same(a,b))</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"SUCCESS\\n\"</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"FAIL\\n\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;<br>&nbsp;</p>\n","categories":["ACM解题报告"],"tags":["并查集"]},{"title":"POJ 2010 Moo UNiversity-Financial Aid","url":"http://yuncry.me/2017/02/15/POJ-2010-Moo-UNiversity-Financial-Aid/","content":"<p><strong>DESCRIPTION</strong><br>Bessie noted that although humans have many universities they can attend, cows have none. To remedy this problem, she and her fellow cows formed a new university called The University of Wisconsin-Farmside,”Moo U” for short. </p>\n<p>Not wishing to admit dumber-than-average cows, the founders created an incredibly precise admission exam called the Cow Scholastic Aptitude Test (CSAT) that yields scores in the range 1..2,000,000,000. </p>\n<p>Moo U is very expensive to attend; not all calves can afford it.In fact, most calves need some sort of financial aid (0 &lt;= aid &lt;=100,000). The government does not provide scholarships to calves,so all the money must come from the university’s limited fund (whose total money is <em>F</em>, 0 &lt;= F &lt;= 2,000,000,000). </p>\n<p>Worse still, Moo U only has classrooms for an <em>odd</em> number <em>N</em> (1 &lt;= N &lt;= 19,999) of the <em>C</em> (N &lt;= C &lt;= 100,000) calves who have applied.Bessie wants to admit exactly N calves in order to maximize educational opportunity. She still wants the median CSAT score of the admitted calves to be as high as possible. </p>\n<p>Recall that the median of a set of integers whose size is odd is the middle value when they are sorted. For example, the median of the set {3, 8, 9, 7, 5} is 7, as there are exactly two values above 7 and exactly two values below it. </p>\n<p>Given the score and required financial aid for each calf that applies, the total number of calves to accept, and the total amount of money Bessie has for financial aid, determine the maximum median score Bessie can obtain by carefully admitting an optimal set of calves. </p>\n<p><strong>INPUT</strong></p>\n<ul>\n<li><p>Line 1: Three space-separated integers <em>N</em>, <em>C</em>, and <em>F</em> </p>\n</li>\n<li><p>Lines 2..C+1: Two space-separated integers per line. The first is the calf’s CSAT score; the second integer is the required amount of financial aid the calf needs </p>\n</li>\n</ul>\n<p><strong>OUTPUT</strong><br>A single integer, <em>the maximum median score</em> that Bessie can achieve. If there is insufficient money to admit N calves,output <em>-1</em>. </p>\n<p><strong>SAMPLE</strong><br><em>Input</em><br>3  5  70<br>30  25<br>50  21<br>20  20<br>5  18<br>35  30<br><em>Output</em><br>35</p>\n<p><strong>NOTE</strong><br>If Bessie accepts the calves with CSAT scores of 5, 35, and 50, the median is 35. The total financial aid required is 18 + 30 + 21 = 69 &lt;= 70. </p>\n<p>题意：一所学校招生，助学金全由学校承担，最多承担的金额为F。现在共有C个学生报名,已知每位学生的入学成绩以及需要的助学金。学校打算招N个学生，并希望这N个学生的成绩的中位数尽可能的大。在学校能承担的范围内，找出这个中位数。</p>\n<p>思路：将所有学生按入学成绩从小到大排列，枚举出从<em>N/2+1</em>到<em>C-N/2</em>这些学生作为中位数时，其左区间N/2个学生的助学金和的最小值(记Left[i])，其右区间N/2个学生的助学金和的最小值(记Right[i])，我不用关心其他人的成绩，只要满足助学金条件就行。枚举完成后，在<em>N/2+1</em>到<em>C-N/2</em>这些学生中，按成绩从大到小依次遍历，找出第一个满足<em>Left[i]+Right[i]+当前这个学生所需助学金</em>不大于F的成绩即可。<br>代码的实现，在记录Left与Right数组时，我用到了优先队列，当枚举第i名学生时，将他的助学金与队列中的最大数作比较，若他的所需助学金小于最大数，则替换掉该最大数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_C = <span class=\"number\">1e5</span>+<span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">struct</span> Cow &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> score,aid;</div><div class=\"line\">&#125;cows[MAX_C];</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\">ll Left[MAX_C], Right[MAX_C];</div><div class=\"line\">ll sum,F;</div><div class=\"line\"><span class=\"keyword\">int</span> N,C;</div><div class=\"line\">priority_queue&lt;<span class=\"keyword\">int</span>&gt; que;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cowsCmp</span> <span class=\"params\">(<span class=\"keyword\">const</span> Cow &amp;c1, <span class=\"keyword\">const</span> Cow &amp;c2)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> c1.score &lt; c2.score;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">record</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;i)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cows[i].aid &lt; que.top()) &#123;</div><div class=\"line\">        sum = sum - que.top() + cows[i].aid;</div><div class=\"line\">        que.pop();</div><div class=\"line\">        que.push(cows[i].aid);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%lld\"</span>,&amp;N,&amp;C,&amp;F);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=C; ++i) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;cows[i].score,&amp;cows[i].aid);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sort(cows+<span class=\"number\">1</span>,cows+<span class=\"number\">1</span>+C,cowsCmp);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//　Left interval</span></div><div class=\"line\">    sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N/<span class=\"number\">2</span>; ++i) &#123;</div><div class=\"line\">        sum += cows[i].aid;</div><div class=\"line\">        que.push(cows[i].aid);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=N/<span class=\"number\">2</span>+<span class=\"number\">1</span>; i&lt;=C-N/<span class=\"number\">2</span>; ++i) &#123;</div><div class=\"line\">        Left[i] = sum;</div><div class=\"line\">        record(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//Right interval</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (!que.empty())  que.pop();</div><div class=\"line\">    sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=C-N/<span class=\"number\">2</span>+<span class=\"number\">1</span>; i&lt;=C; ++i) &#123;</div><div class=\"line\">        sum += cows[i].aid;</div><div class=\"line\">        que.push(cows[i].aid);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=C-N/<span class=\"number\">2</span>; i&gt;=N/<span class=\"number\">2</span>+<span class=\"number\">1</span>; --i) &#123;</div><div class=\"line\">        Right[i] = sum;</div><div class=\"line\">        record(i);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=C-N/<span class=\"number\">2</span>; i&gt;=N/<span class=\"number\">2</span>+<span class=\"number\">1</span>; --i) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Left[i]+Right[i]+cows[i].aid &lt;= F) &#123;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,cows[i].score);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"-1\\n\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM解题报告"],"tags":["优先队列"]},{"title":"POJ 3614 Sunscreen","url":"http://yuncry.me/2017/02/15/POJ-3614-Sunscreen/","content":"<p><strong>DESCRIPTION</strong><br>To avoid unsightly burns while tanning, each of the <em>C</em> (1 ≤ C ≤ 2500) cows must cover her hide with sunscreen when they’re at the beach. Cow <em>i</em> has a minimum and maximum <em>SPF</em> rating (1 ≤ <em>minSPFi</em> ≤ 1,000; <em>minSPFi</em> ≤ <em>maxSPFi</em> ≤ 1,000) that will work. If the SPF rating is too low, the cow suffers sunburn; if the SPF rating is too high, the cow doesn’t tan at all……..</p>\n<p>The cows have a picnic basket with <em>L</em> (1 ≤ L ≤ 2500) bottles of sunscreen lotion, each bottle <em>i</em> with an SPF rating <em>SPFi</em> (1 ≤ SPFi ≤ 1,000). Lotion bottle <em>i</em> can cover <em>coveri</em> cows with lotion. A cow may lotion from only one bottle.</p>\n<p>What is the maximum number of cows that can protect themselves while tanning given the available lotions?</p>\n<p><strong>INPUT</strong></p>\n<ul>\n<li>Line 1: Two space-separated integers: <em>C</em> and <em>L</em></li>\n<li>Lines 2..C+1: Line i describes cow i’s lotion requires with two integers: <em>minSPFi</em> and <em>maxSPFi</em> </li>\n<li>Lines C+2..C+L+1: Line i+C+1 describes a sunscreen lotion bottle <em>i</em> with space-separated integers: <em>SPFi</em> and <em>coveri</em></li>\n</ul>\n<p><strong>OUTPUT</strong><br>A single line with an integer that is the maximum number of cows that can be protected while tanning</p>\n<p><strong>SAMPLE</strong><br><em>Input</em><br>3 2<br>3 10<br>2 5<br>1 5<br>6 2<br>4 1<br><em>Output</em><br>2</p>\n<p>题意：牛也想享受日光浴。给出C头牛L瓶防晒霜，给出每头牛忍受阳光强度的最大值和最小值，防晒霜能让照在牛身上的阳光固定在某个值(SPF)，给出每瓶防晒霜的SPF和使用次数。求出最多可以有多少母牛享受日光浴。</p>\n<p>思路：将牛按照minSPF从小到大排序，将防晒霜按照SPF从小到大排序。<br>遍历防晒霜，把minSPF不大于SPF的牛的maxSPF放入优先队列中，将优先队列中的符合条件的maxSPF从小到大删除。（贪心思想，比如SPF为4，有两头牛——【1,6】【2,10】，这种情况下，选择用在【1,6】上要优于【2,10】)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_C = <span class=\"number\">2500</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_L = <span class=\"number\">2500</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> C,L;</div><div class=\"line\"><span class=\"keyword\">struct</span> Cow &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> minSPF,maxSPF;</div><div class=\"line\">&#125;cs[MAX_L];</div><div class=\"line\"><span class=\"keyword\">struct</span> Lotion &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> SPF,amount;</div><div class=\"line\">&#125;ls[MAX_L];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">CowCmp</span> <span class=\"params\">(<span class=\"keyword\">const</span> Cow &amp;c1, <span class=\"keyword\">const</span> Cow &amp;c2)</span> </span>&#123;<span class=\"keyword\">return</span> c1.minSPF&lt;c2.minSPF; &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">LotionCmp</span> <span class=\"params\">(<span class=\"keyword\">const</span> Lotion &amp;l1, <span class=\"keyword\">const</span> Lotion &amp;l2)</span> </span>&#123;<span class=\"keyword\">return</span> l1.SPF&lt;l2.SPF; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;C,&amp;L);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;C; ++i)</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;cs[i].minSPF,&amp;cs[i].maxSPF);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;L; ++i)</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;ls[i].SPF,&amp;ls[i].amount);</div><div class=\"line\"></div><div class=\"line\">    sort(cs,cs+C,CowCmp);</div><div class=\"line\">    sort(ls,ls+L,LotionCmp);</div><div class=\"line\">    priority_queue&lt;<span class=\"keyword\">int</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;,greater&lt;<span class=\"keyword\">int</span>&gt; &gt; que;</div><div class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>, ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;L; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (c&lt;C &amp;&amp; cs[c].minSPF&lt;=ls[i].SPF) &#123;</div><div class=\"line\">            que.push(cs[c].maxSPF);</div><div class=\"line\">            ++c;</div><div class=\"line\">        &#125;   </div><div class=\"line\">        <span class=\"keyword\">while</span> (!que.empty() &amp;&amp; ls[i].amount) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> v = que.top();</div><div class=\"line\">            que.pop();</div><div class=\"line\">            <span class=\"keyword\">if</span> (v &gt;= ls[i].SPF) &#123;</div><div class=\"line\">                ++ans;</div><div class=\"line\">                --ls[i].amount;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>\n","categories":["ACM解题报告"],"tags":["贪心","优先队列"]},{"title":"记录图论里的一些常见算法","url":"http://yuncry.me/2017/02/14/记录图论里的一些常见算法/","content":"<h1 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h1><h2 id=\"Bellman-Ford\"><a href=\"#Bellman-Ford\" class=\"headerlink\" title=\"Bellman-Ford\"></a>Bellman-Ford</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> edge &#123;<span class=\"keyword\">int</span> from, to, len;&#125;</div><div class=\"line\">edge es[MAX_E];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> d[MAX_V];</div><div class=\"line\"><span class=\"keyword\">int</span> V, E;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Bellman-Ford (<span class=\"keyword\">int</span> s) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;V; ++i)  d[i] = INF;</div><div class=\"line\">    d[s] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">bool</span> update = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;E; ++i) &#123;</div><div class=\"line\">            edge &amp;e = es[i];</div><div class=\"line\">            <span class=\"keyword\">if</span> (d[e.from] != INF &amp;&amp; d[e.to] &gt; d[e.from]+e.len) &#123;</div><div class=\"line\">                d[e.to] = d[e.from]+e.len;</div><div class=\"line\">                update = <span class=\"literal\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!update)  <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在图中不存在负圈的情况下，<em>while(true)</em>最多循环<em>|V|-1</em>次。若存在负圈，则第<em>|v|</em>次循环也会更新<em>d</em>的值，因此可以利用这个性质检查是否含有负圈。</p>\n<h2 id=\"Dijkstra\"><a href=\"#Dijkstra\" class=\"headerlink\" title=\"Dijkstra\"></a>Dijkstra</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> edge &#123;<span class=\"keyword\">int</span> to, len;&#125;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; iiP; <span class=\"comment\">//最短距离，顶点编号</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> V;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;edge&gt; G[MAX_V];</div><div class=\"line\"><span class=\"keyword\">int</span> d[MAX_V];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span> <span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//堆按照iiP的first从小到大取值</span></div><div class=\"line\">    priority_queue&lt;iiP,<span class=\"built_in\">vector</span>&lt;iiP&gt;,greater&lt;iiP&gt; &gt; que;</div><div class=\"line\">    fill(d,d+V,INF);</div><div class=\"line\">    que.push(iiP(<span class=\"number\">0</span>,s));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (!que.empty()) &#123;</div><div class=\"line\">        iiP p = que.top();</div><div class=\"line\">        que.pop();</div><div class=\"line\">        <span class=\"keyword\">int</span> v = p.second;</div><div class=\"line\">        <span class=\"keyword\">if</span> (d[v] &lt; p.first)  <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;edge&gt;::size_type i=<span class=\"number\">0</span>; i&lt;G[v].size(); ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> edge &amp;e = G[v][i]; </div><div class=\"line\">            <span class=\"keyword\">if</span> (d[e.to] &gt; d[v]+e.len) &#123;</div><div class=\"line\">                d[e.to] = d[v]+e.len;</div><div class=\"line\">                que.push(iiP(d[e.to],e.to);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相对于上面Bellman-Ford的O(V*E)的复杂度，Dijkstra的复杂度为O(E*logV),效率更高。但是不能计算图中存在负边的情况。</p>\n<h1 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h1><h2 id=\"Prim\"><a href=\"#Prim\" class=\"headerlink\" title=\"Prim\"></a>Prim</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> edge &#123;<span class=\"keyword\">int</span> to, len; &#125;;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;edge&gt; G[MAX_V];</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; iiP; <span class=\"comment\">//最短距离，顶点编号</span></div><div class=\"line\"><span class=\"keyword\">int</span> minLen[MAX_V];</div><div class=\"line\"><span class=\"keyword\">int</span> V,E;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">prim</span> <span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123;</div><div class=\"line\">\tfill (minLen, minLen+V, INF);</div><div class=\"line\">\tpriority_queue&lt;iiP, <span class=\"built_in\">vector</span>&lt;iiP&gt;, greater&lt;iiP&gt; &gt; que;</div><div class=\"line\">\tminLen[s] = <span class=\"number\">0</span>;</div><div class=\"line\">\tque.push(iiP(<span class=\"number\">0</span>,s));</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (!que.empty()) &#123;</div><div class=\"line\">\t\tiiP now = que.top();</div><div class=\"line\">\t\tque.pop();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> v = now.second;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (minLen[v] &lt; now.first)    <span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\tres += minLen[v];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;edge&gt;::size_type i=<span class=\"number\">0</span>; i&lt;G[v].size(); ++i) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">const</span> edge &amp;e = G[v][i];</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (minLen[e.to] &gt; e.len) &#123;</div><div class=\"line\">\t\t\t\tminLen[e.to] = e.len;</div><div class=\"line\">\t\t\t\tque.push(iiP(minLen[e.to], e.to));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Prim和Dijkstra很像，Dijkstra中的d[i]表示点i到起点的最短距离，Prim中的minLen[i]表示点i到已知最小生成树的最短距离。时间复杂度相同。</p>\n<h2 id=\"Kruskal\"><a href=\"#Kruskal\" class=\"headerlink\" title=\"Kruskal\"></a>Kruskal</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> par[MAX_V];</div><div class=\"line\"><span class=\"keyword\">struct</span> edge &#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> from,to,len;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">edgeCmp</span> <span class=\"params\">(<span class=\"keyword\">const</span> edge &amp;e1, <span class=\"keyword\">const</span> edge &amp;e2)</span> </span>&#123;<span class=\"keyword\">return</span> e1.len &lt; e2.len; &#125;</div><div class=\"line\">edge es[MAX_E];</div><div class=\"line\"><span class=\"keyword\">int</span> E,V;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//union-find</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span> <span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n; ++i) </div><div class=\"line\">\t\tpar[i] = i;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span> <span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> ( par[x] == x)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> par[x] = find(par[x]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">same</span> <span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123; <span class=\"keyword\">return</span> find(x) == find(y); &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//kruskal</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kruskal</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tsort (es, es+E, edgeCmp);</div><div class=\"line\">\tinit (V);</div><div class=\"line\">\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;E; ++i) &#123;</div><div class=\"line\">\t\tedge e = es[i];</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!same(e.from, e.to)) &#123;</div><div class=\"line\">\t\t\tpar[e.from] = e.to;</div><div class=\"line\">\t\t\tres += e.len;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Kruskal按照边的权值从小到大查看一遍，如果不产生圈，就把当前边加入到生成树。利用并查集可以判断是否产生圈。时间复杂度为O(E*logV)。如果题目给出的是不连通图，用Kruskal更好。</p>\n","categories":["Algorithms"],"tags":["最短路径","最小生成树"]},{"title":"HDU 2845 Beans","url":"http://yuncry.me/2017/02/14/HDU-2845-Beans/","content":"<p><strong>DESCRIPTION</strong><br>Bean-eating is an interesting game, everyone owns an M*N matrix, which is filled with different qualities beans. Meantime, there is only one bean in any 1*1 grid. Now you want to eat the beans and collect the qualities, but everyone must obey by the following rules: if you eat the bean at the coordinate<em>(x, y)</em>, you can’t eat the beans anyway at the coordinates listed (if exiting): <em>(x, y-1)</em>, <em>(x, y+1)</em>, and the both rows whose abscissas are <em>x-1</em> and <em>x+1</em>.<br><img src=\"/img/HDU2845.jpeg\" alt=\"\"></p>\n<p>Now, how much qualities can you eat and then get ?</p>\n<p><strong>INPUT</strong><br>There are a few cases. In each case, there are two integer <em>M</em> (row number) and <em>N</em> (column number). The next <em>M</em> lines each contain <em>N</em> integers, representing the qualities of the beans. We can make sure that the quality of bean isn’t beyond 1000, and 1&lt;=M*N&lt;=200000. </p>\n<p><strong>OUTPUT</strong><br>For each case, you just output the MAX qualities you can eat and then get.</p>\n<p><strong>SAMPLE</strong><br><em>Input</em><br>4 6<br>11 　0　 7　 5　 13　 9<br>78 　4 　81 　6 　22　 4<br>1 　40　 9　 34 　16　 10<br>11　 22　 0　 33　 39　 6<br><em>Output</em><br>242</p>\n<p>&nbsp;<br>&nbsp;<br>题意：给定一个矩阵，每一行中不能选择相邻的数字，不能选择相邻的行，求出所选数的和的最大值。</p>\n<p>思路：先对每一行求出其最大不连续和。对每一行所求出的最大值，再求一次最大不连续和。</p>\n<p>状态转移方程为<br><em>dp[i+1] = max (dp[i], dp[i-1]+num)</em>　　//表示第 <em>i</em> 个位置所能达到的最大值</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_N = <span class=\"number\">200005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> dp[MAX_N], row[MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> N,M,num;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;M,&amp;N)) &#123;</div><div class=\"line\">        dp[<span class=\"number\">0</span>] = dp[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=M; ++j) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i) &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;num);</div><div class=\"line\">                dp[i+<span class=\"number\">1</span>] = max (dp[i], dp[i<span class=\"number\">-1</span>]+num);</div><div class=\"line\">            &#125;</div><div class=\"line\">            row[j] = dp[N+<span class=\"number\">1</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=M; ++i)</div><div class=\"line\">            dp[i+<span class=\"number\">1</span>] = max (dp[i], dp[i<span class=\"number\">-1</span>]+row[i]);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,dp[M+<span class=\"number\">1</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM解题报告"],"tags":["DP"]},{"title":"CodeForces 601A The Two Routes","url":"http://yuncry.me/2017/02/14/CodeForces-601A-The-Two-Routes/","content":"<p><strong>DESCRIPTION</strong><br>In Absurdistan, there are n towns (numbered 1 through n) and m bidirectional railways. There is also an absurdly simple road network — for each pair of different towns <em>x</em> and <em>y</em>, there is a bidirectional road between towns <em>x</em> and <em>y</em> if and only if there is no railway between them. Travelling to a different town using one railway or one road always takes exactly one hour.</p>\n<p>A train and a bus leave town <em>1</em> at the same time. They both have the same destination, town <em>n</em>, and don’t make any stops on the way (but they can wait in town <em>n</em>). The train can move only along railways and the bus can move only along roads.</p>\n<p>You’ve been asked to plan out routes for the vehicles; each route can use any road/railway multiple times. One of the most important aspects to consider is safety — in order to avoid accidents at railway crossings, the train and the bus must not arrive at the same town (except town <em>n</em>) simultaneously.</p>\n<p>Under these constraints, what is the minimum number of hours needed for both vehicles to reach town <em>n</em> (the maximum of arrival times of the bus and the train)? Note, that bus and train are not required to arrive to the town <em>n</em> at the same moment of time, but are allowed to do so.</p>\n<p><strong>INPUT</strong><br>The first line of the input contains two integers <em>n</em> and <em>m</em> (2 ≤ n ≤ 400, 0 ≤ m ≤ n(n - 1) / 2) — the number of towns and the number of railways respectively.</p>\n<p>Each of the next <em>m</em> lines contains two integers <em>u</em> and <em>v</em>, denoting a railway between towns <em>u</em> and <em>v</em> (1 ≤ u, v ≤ n, u ≠ v).</p>\n<p>You may assume that there is at most one railway connecting any two towns.</p>\n<p><strong>OUTPUT</strong><br>Output one integer — the smallest possible time of the later vehicle’s arrival in town <em>n</em>. If it’s impossible for at least one of the vehicles to reach town <em>n</em>, output  <em>-1</em>.</p>\n<p><strong>EXAMPLE</strong><br><em>Input</em><br>4 2<br>1 3<br>3 4<br><em>Output</em><br>2</p>\n<p><em>Input</em><br>4 6<br>1 2<br>1 3<br>1 4<br>2 3<br>2 4<br>3 4<br><em>Output</em><br>-1</p>\n<p><em>Input</em><br>5 5<br>4 2<br>3 5<br>4 5<br>5 1<br>1 2<br><em>Output</em><br>3</p>\n<p><strong>Note</strong><br>In the first sample, the train can take the route <em>1-3-4</em> and the bus can take the route <em>1-2-4</em> . Note that they can arrive at town 4 at the same time.</p>\n<p>In the second sample, Absurdistan is ruled by railwaymen. There are no roads, so there’s no way for the bus to reach town 4.<br>&nbsp;</p>\n<p>题意：有n个城镇，每个城镇之间要么由公路连着要么由铁路连着，每个城镇间的耗时都为１。给出m条铁路的路线，问从城镇1出发，分别坐火车和坐汽车到达城镇n，两者最少用时的较大值。途中不能换乘，并且火车和汽车不能同时到达除１和ｎ之外的点。</p>\n<p>思路：用Dijkstra求两次最短路径就行。虽然题目有要求说不能同时经过中途某个点，但是仔细想想，城镇1与城镇n之间必有一条路，因此两条路线中的最短耗时为１，即不可能同时经过某个点。（差点信了题目的鬼话）</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; iiP; <span class=\"comment\">//距离，点</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_N = <span class=\"number\">405</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">1e9</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> rail[MAX_N][MAX_N], road[MAX_N][MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> d[MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> N,M;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Dijsktra (<span class=\"keyword\">int</span> (&amp;<span class=\"built_in\">map</span>)[MAX_N][MAX_N]) &#123;</div><div class=\"line\">    <span class=\"built_in\">fill</span> (d+<span class=\"number\">1</span>, d+<span class=\"number\">1</span>+N, INF);</div><div class=\"line\">    d[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">    priority_queue&lt;iiP,vector&lt;iiP&gt;,greater&lt;iiP&gt; &gt; que;</div><div class=\"line\">    que.push(iiP(<span class=\"number\">0</span>,<span class=\"number\">1</span>));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">while</span>(!que.empty()) &#123;</div><div class=\"line\">        iiP p = que.top();</div><div class=\"line\">        que.pop();</div><div class=\"line\">        <span class=\"keyword\">int</span> v = p.second;</div><div class=\"line\">        <span class=\"built_in\">if</span> (d[v] &lt; p.first)  <span class=\"built_in\">continue</span>;</div><div class=\"line\">        <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> u=<span class=\"number\">1</span>; u&lt;=N; ++u) &#123;</div><div class=\"line\">            <span class=\"built_in\">if</span> (d[u] &gt; d[v]+<span class=\"built_in\">map</span>[v][u]) &#123;</div><div class=\"line\">                d[u] = d[v]+<span class=\"built_in\">map</span>[v][u];</div><div class=\"line\">                que.push(iiP(d[u],u));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">return</span> d[N];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> main ()</div><div class=\"line\">&#123;</div><div class=\"line\">    scanf(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;M);</div><div class=\"line\">    <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i)</div><div class=\"line\">        <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=N; ++j) &#123;</div><div class=\"line\">            rail[i][j] = rail[j][i] = INF;</div><div class=\"line\">            road[i][j] = road[j][i] = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;M; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u,v;</div><div class=\"line\">        scanf(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;v);</div><div class=\"line\">        road[u][v] = road[v][u] = INF;</div><div class=\"line\">        rail[u][v] = rail[v][u] = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> dRail = Dijsktra(rail), dRoad = Dijsktra(road);</div><div class=\"line\">    <span class=\"built_in\">if</span> (dRail==INF || dRoad==INF)</div><div class=\"line\">        printf(<span class=\"string\">\"-1\\n\"</span>);</div><div class=\"line\">    <span class=\"built_in\">else</span></div><div class=\"line\">        printf(<span class=\"string\">\"%d\\n\"</span>,<span class=\"built_in\">max</span>(dRail,dRoad));</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>\n","categories":["ACM解题报告"],"tags":["最短路径"]},{"title":"CodeForces 744A Hongcow Builds A Nation","url":"http://yuncry.me/2017/02/14/CodeForces-744A-Hongcow-Builds-A-Nation/","content":"<p><strong>DESCRIPTION</strong><br>Hongcow is ruler of the world. As ruler of the world, he wants to make it easier for people to travel by road within their own countries.</p>\n<p>The world can be modeled as an undirected graph with <em>n</em> nodes and <em>m</em> edges. <em>k</em> of the nodes are home to the governments of the <em>k</em> countries that make up the world.</p>\n<p>There is at most one edge connecting any two nodes and no edge connects a node to itself. Furthermore, for any two nodes corresponding to governments, there is no path between those two nodes. Any graph that satisfies all of these conditions is stable.</p>\n<p>Hongcow wants to add as many edges as possible to the graph while keeping it stable. Determine the maximum number of edges Hongcow can add.</p>\n<p><strong>INPUT</strong><br>The first line of input will contain three integers <em>n</em>, <em>m</em> and <em>k</em> (1 ≤ n ≤ 1 000, 0 ≤ m ≤ 100 000, 1 ≤ k ≤ n) — the number of vertices and edges in the graph, and the number of vertices that are homes of the government.</p>\n<p>The next line of input will contain <em>k</em> integers <em>c1, c2, …, ck</em> (1 ≤ ci ≤ n). These integers will be pairwise distinct and denote the nodes that are home to the governments in this world.</p>\n<p>The following m lines of input will contain two integers ui and vi (1 ≤ ui, vi ≤ n). This denotes an undirected edge between nodes <em>ui</em> and <em>vi</em>.</p>\n<p>It is guaranteed that the graph described by the input is stable.</p>\n<p><strong>OUTPUT</strong><br>Output a single integer, the maximum number of edges Hongcow can add to the graph while keeping it stable.    </p>\n<p><strong>EXAMPLE</strong><br><em>Input</em><br>4 1 2<br>1 3<br>1 2<br><em>output</em><br>2</p>\n<p><em>Input</em><br>3 3 1<br>2<br>1 2<br>1 3<br>2 3<br><em>Output</em><br>0</p>\n<p><strong>Note</strong><br>For the first sample test, the graph looks like this:</p>\n<p><img src=\"/img/CodeForces744A_1\" alt=\"\"><br>Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2 edges. We cannot add any more edges, since vertices 1 and 3 cannot have any path between them.<br>For the second sample test, the graph looks like this:</p>\n<p><img src=\"/img/CodeForces744A_2\" alt=\"\"><br>We cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.<br>&nbsp;<br>&nbsp;<br>&nbsp;<br>这道题换成人话就是：有<em>n</em>个点，<em>m</em>条边，其中<em>k</em>个点代表不同的政府。任意两个结点最多存在一条边，任意两个政府之间不能存在通路，结点不连自己。问满足上述条件时，最多能往图中添加多少条边。</p>\n<p>思路：<br>可以把图上的点分为两个集合，集合A包含所有含政府结点的点集，集合B包含其他与政府还未连通的结点。（比如有<em>1-10</em>十个结点，结点<em>1</em>和结点<em>2</em>是政府。<em>3、4、5</em>与<em>1</em>连通，<em>6</em>与<em>2</em>连通，剩下的结点<em>7、8、9、10</em>不管它们之间有没有通路先作为集合B，集合A包括<em>1-3-4-5</em>，<em>2-6</em>。）<br>在集合A中找到点数最多的点集（比如<em>1-3-4-5</em>），将集合B中所有的点加入到该点集中。（一顿操作后，点集有<em>6-2、1-3-4-5-7-8-9-10</em>)<br>于是　最多添加的边数＝所有点集完全图的边数－<em>m</em><br>与集合有关的题目，可以考虑下并查集。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_N = <span class=\"number\">1005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> N,M,K;</div><div class=\"line\"><span class=\"keyword\">int</span> cnt[MAX_N],par[MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> gov[MAX_N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i) &#123;</div><div class=\"line\">        par[i] = i;</div><div class=\"line\">        cnt[i] = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span> <span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (par[x] == x) </div><div class=\"line\">        <span class=\"keyword\">return</span> x;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"keyword\">return</span> par[x] = find(par[x]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unite</span> <span class=\"params\">(<span class=\"keyword\">int</span> &amp;x, <span class=\"keyword\">int</span> &amp;y)</span> </span>&#123;</div><div class=\"line\">    x = find(x);</div><div class=\"line\">    y = find(y);</div><div class=\"line\">    <span class=\"keyword\">if</span> (x==y)  <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cnt[x] &lt;= cnt[y]) &#123;</div><div class=\"line\">        par[x] = y;</div><div class=\"line\">        cnt[y] += cnt[x]; </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        par[y] = x;</div><div class=\"line\">        cnt[x] += cnt[y];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;N,&amp;M,&amp;K);</div><div class=\"line\">    init();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=K; ++i) </div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;gov[i]);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;M; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u,v;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;v);</div><div class=\"line\">            unite(u,v);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>,maxCnt=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=K; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = find(gov[i]);   </div><div class=\"line\">        maxCnt = max(cnt[x],maxCnt);</div><div class=\"line\">        N -= cnt[x];</div><div class=\"line\">        ans += cnt[x]*(cnt[x]<span class=\"number\">-1</span>)/<span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ans += (N+maxCnt)*(N+maxCnt<span class=\"number\">-1</span>)/<span class=\"number\">2</span>;</div><div class=\"line\">    ans -= maxCnt*(maxCnt<span class=\"number\">-1</span>)/<span class=\"number\">2</span>+M;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;<br>&nbsp;</p>\n","categories":["ACM解题报告"],"tags":["并查集","贪心"]},{"title":"CodeForces 356A Knight Tournament","url":"http://yuncry.me/2017/02/13/CodeForces-356A-Knight-Tournament/","content":"<p><strong>DESCRIPTION</strong><br>Hooray! Berl II, the king of Berland is making a knight tournament. The king has already sent the message to all knights in the kingdom and they in turn agreed to participate in this grand event.</p>\n<p>As for you, you’re just a simple peasant. There’s no surprise that you slept in this morning and were late for the tournament (it was a weekend, after all). Now you are really curious about the results of the tournament. This time the tournament in Berland went as follows:</p>\n<ul>\n<li>There are n knights participating in the tournament. Each knight was assigned his unique number — an integer from 1 to n.</li>\n<li>The tournament consisted of m fights, in the i-th fight the knights that were still in the game with numbers at least li and at most rihave fought for the right to continue taking part in the tournament.</li>\n<li>After the i-th fight among all participants of the fight only one knight won — the knight number xi, he continued participating in the tournament. Other knights left the tournament.</li>\n<li>The winner of the last (the m-th) fight (the knight number xm) became the winner of the tournament.</li>\n</ul>\n<p>You fished out all the information about the fights from your friends. Now for each knight you want to know the name of the knight he was conquered by. We think that the knight number b was conquered by the knight number a, if there was a fight with both of these knights present and the winner was the knight number a.</p>\n<p>Write the code that calculates for each knight, the name of the knight that beat him.<br>&nbsp;<br>&nbsp;<br><strong>INPUT</strong><br>The first line contains two integers n, m (2 ≤ n ≤ 3·10e5; 1 ≤ m ≤ 3·10e5) — the number of knights and the number of fights. Each of the following m lines contains three integers li, ri, xi (1 ≤ li &lt; ri ≤ n; li ≤ xi ≤ ri) — the description of the i-th fight.<br>&nbsp;<br>&nbsp;<br><strong>OUTPUT</strong><br>Print n integers. If the i-th knight lost, then the i-th number should equal the number of the knight that beat the knight number i. If the i-th knight is the winner, then the i-th number must equal 0.<br>&nbsp;<br>&nbsp;<br><strong>EXAMPLE</strong><br><em>Input</em><br>4 3<br>1 2 1<br>1 3 3<br><em>Output</em><br>3 1 4 0</p>\n<p><em>Input</em><br>8 4<br>3 5 4<br>3 7 6<br>2 8 8<br>1 8 1<br><em>Output</em><br>0 8 4 6 4 8 6 1</p>\n<p>首先把题目意思搞懂：有N个人参加比赛，共M场比赛，每次比赛给出 <em>l, r, x</em> 表示 <em>[l,r]</em> 区间内的人都被x打败。最后输入每个人是被谁打败的，冠军输出0 。</p>\n<p>读懂题意后，我最先想到的就是暴力思路，维护一个数组，数组下标为某选手，其值为击败该选手的人。每次遍历 <em>l-r</em> ,更新这个数组。<br><em>然而TLE…</em><br>上述方法的复杂度是O(N*M)(每次都给出最大的l-r区间），N和M值都很大，因此为了降低复杂度，想到用<em>set</em>来维护这个集合。</p>\n<p>set有个酷炫的函数<em>lower_bound(i)</em>,可以直接返回指向第一个大于等于i的值的迭代器，复杂度为O(logn)</p>\n<p>开始时把所有人都加进<em>set</em>集合内，每轮比赛过后从<em>set</em>中删除被淘汰的人。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_N = <span class=\"number\">300005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> beatBy[MAX_N],leave[MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> N,M;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;M);</div><div class=\"line\">    <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i) &#123;</div><div class=\"line\">        s.insert(i);</div><div class=\"line\">        beatBy[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">while</span> (M--) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> l,r,x,cnt=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;l,&amp;r,&amp;x);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it=s.lower_bound(l); it!=s.end() &amp;&amp; *it&lt;=r; ++it) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (*it != x) &#123;</div><div class=\"line\">                beatBy[*it] = x;</div><div class=\"line\">                leave[cnt++] = *it;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;cnt; ++j)</div><div class=\"line\">            s.erase(leave[j]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i)</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,beatBy[i]);</div><div class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM解题报告"],"tags":["二叉搜索树"]},{"title":"C++ Primer 第十二章练习题","url":"http://yuncry.me/2016/11/13/C-Primer-第十二章练习题/","content":"<h1 id=\"nbsp-12-1-1节练习\"><a href=\"#nbsp-12-1-1节练习\" class=\"headerlink\" title=\"&nbsp;12.1.1节练习\"></a>&nbsp;12.1.1节练习</h1><h2 id=\"nbsp-练习12-1\"><a href=\"#nbsp-练习12-1\" class=\"headerlink\" title=\"&nbsp;练习12.1\"></a>&nbsp;练习12.1</h2><blockquote>\n<p>在此代码的结尾，b1和b2各包含多少个元素？<br>StrBlob b1;<br>{<br>StrBlob b2 = {“a”,”an”,”the”};<br>b1 = b2;<br>b2.push_back(“about”);<br>}</p>\n</blockquote>\n<p><strong>b2</strong>被自动销毁了，说包含几个元素没意义。<br><strong>b1</strong>指向最初由<strong>b2</strong>创建的四个元素。</p>\n<h2 id=\"nbsp-练习12-2\"><a href=\"#nbsp-练习12-2\" class=\"headerlink\" title=\"&nbsp;练习12.2\"></a>&nbsp;练习12.2</h2><blockquote>\n<p>编写你自己的StrBlob类，包含const版本的front和back。。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;initializer_list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;exception&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"keyword\">class</span> StrBlob &#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span>:</div><div class=\"line\">\t\t<span class=\"keyword\">using</span> size_type = <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;::size_type;</div><div class=\"line\">\t\tStrBlob ();</div><div class=\"line\">\t\tStrBlob (<span class=\"built_in\">std</span>::initializeur_list&lt;<span class=\"built_in\">string</span>&gt; il);</div><div class=\"line\">\t\t<span class=\"function\">size_type <span class=\"title\">size</span> <span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> data-&gt;size(); &#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> data-&gt;empty(); &#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_back</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;t)</span> </span>&#123; data-&gt;push_back(t); &#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pop_back</span> <span class=\"params\">()</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"built_in\">string</span>&amp; <span class=\"title\">front</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; <span class=\"title\">front</span> <span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"built_in\">string</span>&amp; <span class=\"title\">back</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; <span class=\"title\">back</span> <span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</div><div class=\"line\">   </div><div class=\"line\">\t<span class=\"keyword\">private</span>:</div><div class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; data;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">check</span> <span class=\"params\">(size_type i, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;msg)</span> <span class=\"keyword\">const</span></span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">StrBlob:: StrBlob(): data(make_shared&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt;()) &#123;&#125;</div><div class=\"line\">StrBlob:: StrBlob(<span class=\"built_in\">std</span>::initializeur_list&lt;<span class=\"built_in\">string</span>&gt; il): data(make_shared&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt;(il)) &#123;&#125;</div><div class=\"line\">     </div><div class=\"line\"><span class=\"keyword\">void</span> StrBlob::check(size_type i, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;msg) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (data-&gt;size() &lt;= i)</div><div class=\"line\">\t\t<span class=\"keyword\">throw</span> out_of_range (msg);</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">void</span> StrBlob::pop_back ()</div><div class=\"line\">&#123;</div><div class=\"line\">\tcheck(<span class=\"number\">0</span>,<span class=\"string\">\"pop_back on empty StrBlob\"</span>);</div><div class=\"line\">\tdata-&gt;pop_back();</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">string</span>&amp; StrBlob::front() </div><div class=\"line\">&#123;</div><div class=\"line\">\t</div><div class=\"line\">\tcheck(<span class=\"number\">0</span>,<span class=\"string\">\"front on empty StrBlob\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> data-&gt;front();</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; StrBlob::front () <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  </div><div class=\"line\">\tcheck(<span class=\"number\">0</span>,<span class=\"string\">\"front on empty StrBlob\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> data-&gt;front();</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">string</span>&amp; StrBlob::back()</div><div class=\"line\">&#123;</div><div class=\"line\">   \t</div><div class=\"line\">\tcheck(<span class=\"number\">0</span>,<span class=\"string\">\"back on empty StrBlob\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> data-&gt;back();</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; StrBlob::back() <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  \t</div><div class=\"line\">\tcheck(<span class=\"number\">0</span>,<span class=\"string\">\"back on empty StrBlob\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> data-&gt;back();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"nbsp-练习12-3\"><a href=\"#nbsp-练习12-3\" class=\"headerlink\" title=\"&nbsp;练习12.3\"></a>&nbsp;练习12.3</h2><blockquote>\n<p>StrBlob需要const版本的 push_back 和 pop_back 吗？如果需要，添加进去。否则，请解释。</p>\n</blockquote>\n<p>这道题挺有意思的。从语法角度来看加了const版本的push_back 和pop_back可以通过编译并没有出现错误。但是如果从类的使用者角度来考虑这个问题,加了它们会发生神奇的事情！<br>假设我们已经定义了const版本的 push_back 。然后我们 const StrBlob wtfBlob，定义了这么一个对象。接着我们使用push_back:<br>wtfBlob.push_back(lalala);</p>\n<p>从语法来看，wtfBlob是个指针常量，本身不能改变，指向的对象可以改变。而这里的push_back改变的是wtfBlob指向的对象，所以可以通过编译。<br>类的使用者并不知道StrBlob的实现细节，在他看来，wtfBlob就是一个容器。“一个const容器，竟然可以使用push_back,见鬼啦？”</p>\n<p>不加入const版本，用户写 wtfBlob.push_back(lalala); 不能通过编译，恰好能起到提醒的作用。所以不需要添加进去。</p>\n<h2 id=\"nbsp-练习12-4\"><a href=\"#nbsp-练习12-4\" class=\"headerlink\" title=\"&nbsp;练习12.4\"></a>&nbsp;练习12.4</h2><blockquote>\n<p>在 check 函数中，没有检查 i 是否大于０。为什么可以忽略这个检查？ 　　</p>\n</blockquote>\n<p>i 的类型是 size_type，任何小于0的实参将会被转化成大于０的数字,所以可以忽略这个检查。</p>\n<h2 id=\"nbsp-练习12-5\"><a href=\"#nbsp-练习12-5\" class=\"headerlink\" title=\"&nbsp;练习12.5\"></a>&nbsp;练习12.5</h2><blockquote>\n<p>我们未编写接受一个 initializer_list explicit 参数的构造函数。讨论这个设计策略的优点和缺点。</p>\n</blockquote>\n<p>如果我们编写了这样一个构造函数：<br><strong>优点</strong>:没有任何构造函数能隐式地创建StrBlob对象，代码将更清晰。<br><strong>缺点</strong>:总是需要构造临时的StrBlob对象。另外地，不能使用拷贝初始化。使用起来不方便<br>&nbsp;<br>&nbsp;</p>\n<h1 id=\"nbsp-12-1-2节练习\"><a href=\"#nbsp-12-1-2节练习\" class=\"headerlink\" title=\"&nbsp;12.1.2节练习\"></a>&nbsp;12.1.2节练习</h1><h2 id=\"nbsp-练习12-6\"><a href=\"#nbsp-练习12-6\" class=\"headerlink\" title=\"&nbsp;练习12.6\"></a>&nbsp;练习12.6</h2><blockquote>\n<p>编写函数，返回一个动态分配的 int 的 vector。将此 vector 传递给另一个函数，这个函数读取标准输入，将读入的值保存在 vector　元素中。再将 vector 传递给另一个函数，打印读入的值。记得在恰当的时刻delete vector。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>;\t\t<span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>; </div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec_make()</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &#123; &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; i) </div><div class=\"line\">\t\tiVec-&gt;push_back(i);</div><div class=\"line\">\t<span class=\"keyword\">return</span> iVec;\t</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : *iVec)</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">cout</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">auto</span> vec = read(iVec_make());</div><div class=\"line\">\tprint(vec) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t<span class=\"keyword\">delete</span> vec;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"nbsp-练习12-7\"><a href=\"#nbsp-练习12-7\" class=\"headerlink\" title=\"&nbsp;练习12.7\"></a>&nbsp;练习12.7</h2><blockquote>\n<p>重做上一题，这次使用shared_ptr而不是内置指针。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>;\t\t<span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>; </div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec_make()</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">std</span>::make_shared&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; ();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; i) </div><div class=\"line\">\t\tiVec-&gt;push_back(i);</div><div class=\"line\">\t<span class=\"keyword\">return</span> iVec;\t</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : *iVec)</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">cout</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">auto</span> vec = read( iVec_make() );</div><div class=\"line\">\tprint(vec) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"nbsp-练习12-8\"><a href=\"#nbsp-练习12-8\" class=\"headerlink\" title=\"&nbsp;练习12.8\"></a>&nbsp;<strong>练习12.8</strong></h2><blockquote>\n<p>下面的函数是否有错误？如果有，解释错误原因。<br>bool b() {<br>int *p = new int;<br>// …<br>return p;<br>}</p>\n</blockquote>\n<p>有错误。p由指针类型转换为布尔类型，程序没办法释放这片分配的动态内存。导致内存泄露问题。若返回类型是<strong> int* </strong>，那么调用者可以释放内存。</p>\n<h2 id=\"nbsp-练习12-9\"><a href=\"#nbsp-练习12-9\" class=\"headerlink\" title=\"&nbsp;练习12.9\"></a>&nbsp;练习12.9</h2><blockquote>\n<p>解释下面代码执行的结果<br>int q = new int(42), r = new int(100);<br>r = q;<br>auto q2 = make_shared&lt;int>(42), r2 = make_shared&lt;int>(100);<br>r2 = q2;</p>\n</blockquote>\n<ul>\n<li>q和r指向同一块动态分配的内存，没有指针指向另一块动态分配的内存，导致内存泄漏问题。</li>\n<li><em>r2 = q2</em> 使q2的引用计数递增为２，r2的引用计数递减为０。结果是之前给r2分配的内存自动地被释放。这代码是安全的。<br>&nbsp;<br>&nbsp;<h1 id=\"nbsp-12-1-3节练习\"><a href=\"#nbsp-12-1-3节练习\" class=\"headerlink\" title=\"&nbsp;12.1.3节练习\"></a>&nbsp;12.1.3节练习</h1><h2 id=\"nbsp-练习12-10\"><a href=\"#nbsp-练习12-10\" class=\"headerlink\" title=\"&nbsp;练习12.10\"></a>&nbsp;练习12.10</h2></li>\n</ul>\n<blockquote>\n<p>下面的代码调用了第413页定义的process函数，解释此调用是否正确。如果不正确，应如何修改?<br>shared_ptr&lt;int> p(new int(42));<br>process(shared_ptr&lt;int> (p));<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process</span> <span class=\"params\">(<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; ptr)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"in process,ptr.use_count = \"</span> &lt;&lt; ptr.use_count() &lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p1 (<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">42</span>));</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"before process,p1.use_count = \"</span> &lt;&lt; p1.use_count() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\tprocess (<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; (p1));</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"after process,p1.use_count = \"</span> &lt;&lt; p1.use_count() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">   </div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>输出结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">aphro@7559:~$ ./a</div><div class=\"line\">before process,p1.use_count = 1</div><div class=\"line\"><span class=\"keyword\">in</span> process,ptr.use_count = 2</div><div class=\"line\">after process,p1.use_count = 1</div></pre></td></tr></table></figure>\n<p>调用是正确的，创建临时对象<em>shared_ptr&lt;int> (p)</em>时递增了p的引用计数。</p>\n<h2 id=\"nbsp-练习12-11\"><a href=\"#nbsp-练习12-11\" class=\"headerlink\" title=\"&nbsp;练习12.11\"></a>&nbsp;练习12.11</h2><blockquote>\n<p>如果我们像下面这样调用 process，会发生什么?<br>process (shared_ptr&lt;int>(p.get()));</p>\n</blockquote>\n<p>p指向的内存在process()函数结束时被自动释放,再次使用p将发生未定义的行为。而且当p被销毁时，这块内存上发生double free。</p>\n<h2 id=\"nbsp-练习12-12\"><a href=\"#nbsp-练习12-12\" class=\"headerlink\" title=\"&nbsp;练习12.12\"></a>&nbsp;练习12.12</h2><blockquote>\n<p>p和sp的定义如下，对于接下来的对process的每个调用，如果合法，解释它做了什么，如果不合法，解释其错误原因：<br>auto p = new int();<br>auto sp = make_shared&lt;int> ();</p>\n<ul>\n<li>process(sp);</li>\n<li>process(new int());</li>\n<li>process(p);</li>\n<li>process(shared_ptr&lt;int> (p));</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>合法，拷贝sp会递增其引用计数，在process中引用计数为2。</p>\n</li>\n<li><p>不合法，接受指针参数的智能指针构造函数是explicit的。不能将一个内置指针隐式地转换为一个智能指针。</p>\n</li>\n<li><p>不合法，理由同２。</p>\n</li>\n<li><p>虽然合法，但容易出问题，比如<em>double free</em>。</p>\n</li>\n</ul>\n<h2 id=\"nbsp-练习12-13\"><a href=\"#nbsp-练习12-13\" class=\"headerlink\" title=\"&nbsp;练习12.13\"></a>&nbsp;练习12.13</h2><blockquote>\n<p>如果执行下面的代码，会发生什么?<br>auto sp = make_shared&lt;int> ();<br>auto p = sp.get();<br>delete p;</p>\n</blockquote>\n<p>delete p后，sp成了空悬指针，若再次使用sp，将会发生未定义的行为。并且，当sp被销毁时，这块内存会被第二次delete。<br>&nbsp;<br>&nbsp;</p>\n","categories":["C++"],"tags":["C++ Primer"]},{"title":"Linux升级内核时/boot空间不足解决办法","url":"http://yuncry.me/2016/11/05/Linux升级内核时-boot空间不足解决办法/","content":"<blockquote>\n<p>今天安装更新时，系统提示我/boot空间已满。内核文件默认储存在/boot中，多次升级内核后，内核版本太多，清理没有的内核文件就行。</p>\n</blockquote>\n<h2 id=\"首先看一下磁盘情况\"><a href=\"#首先看一下磁盘情况\" class=\"headerlink\" title=\"首先看一下磁盘情况\"></a>首先看一下磁盘情况</h2><p>输入　<strong>df -h</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ df -h</div><div class=\"line\">文件系统        容量  已用  可用 已用% 挂载点</div><div class=\"line\">udev            3.9G     0  3.9G    0% /dev</div><div class=\"line\">tmpfs           786M  9.6M  777M    2% /run</div><div class=\"line\">/dev/sda6        29G  6.9G   20G   26% /</div><div class=\"line\">tmpfs           3.9G  221M  3.7G    6% /dev/shm</div><div class=\"line\">tmpfs           5.0M  4.0K  5.0M    1% /run/lock</div><div class=\"line\">tmpfs           3.9G     0  3.9G    0% /sys/fs/cgroup</div><div class=\"line\">/dev/sda8       181M  172M     0  100% /boot</div><div class=\"line\">/dev/sda9       260G   22G  225G    9% /home</div><div class=\"line\">/dev/sda1        96M   29M   68M   30% /boot/efi</div><div class=\"line\">tmpfs           786M   64K  786M    1% /run/user/1000</div></pre></td></tr></table></figure></p>\n<p>/boot已用100％需要清理了。</p>\n<h2 id=\"查看当前使用的内核版本号\"><a href=\"#查看当前使用的内核版本号\" class=\"headerlink\" title=\"查看当前使用的内核版本号\"></a>查看当前使用的内核版本号</h2><p>输入　<strong>uname -a</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ uname <span class=\"_\">-a</span></div><div class=\"line\">Linux 7559 4.4.0-38-generic <span class=\"comment\">#57-Ubuntu SMP Tue Sep 6 15:42:33 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></div></pre></td></tr></table></figure></p>\n<p>当前内核版本号4.4.0-38</p>\n<h2 id=\"删除旧内核\"><a href=\"#删除旧内核\" class=\"headerlink\" title=\"删除旧内核\"></a>删除旧内核</h2><p>输入　<strong>sudo apt-get remove linux-image-　　</strong>接着按两下<em>Tab</em>将显示当前储存的所有内核版本，把之前的版本删除就行。<strong>刚升级的版本可能不稳定，为了保险保留之前1-2版本备用。</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get remove linux-image-</div><div class=\"line\">linux-image-4.4.0-36-generic        linux-image-extra-4.4.0-36-generic</div><div class=\"line\">linux-image-4.4.0-38-generic        linux-image-extra-4.4.0-38-generic</div><div class=\"line\">linux-image-4.4.0-45-generic        linux-image-generic</div><div class=\"line\">aphro@7559:~$ sudo apt-get remove linux-image-4.4.0-36-generic </div><div class=\"line\">[sudo] aphro 的密码： </div><div class=\"line\">正在读取软件包列表... 完成</div><div class=\"line\">正在分析软件包的依赖关系树 </div><div class=\"line\">正在读取状态信息... 完成 </div><div class=\"line\">下列软件包是自动安装的并且现在不需要了：</div><div class=\"line\">  linux-headers-4.4.0-36 linux-headers-4.4.0-36-generic</div><div class=\"line\">  使用<span class=\"string\">'sudo apt autoremove'</span>来卸载它(它们)。</div><div class=\"line\">  下列软件包将被【卸载】：</div><div class=\"line\">   linux-image-4.4.0-36-generic linux-image-extra-4.4.0-36-generic</div><div class=\"line\">   linux-signed-image-4.4.0-36-generic</div><div class=\"line\">   升级了 0 个软件包，新安装了 0 个软件包，要卸载 3 个软件包，有 136 个软件包未被升级。</div><div class=\"line\">   有 5 个软件包没有被完全安装或卸载。</div><div class=\"line\">   解压缩后将会空出 218 MB 的空间。</div><div class=\"line\">   您希望继续执行吗？ [Y/n] Y</div></pre></td></tr></table></figure></p>\n<h2 id=\"再次查看-boot分区容量\"><a href=\"#再次查看-boot分区容量\" class=\"headerlink\" title=\"再次查看/boot分区容量\"></a>再次查看/boot分区容量</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ df -h</div><div class=\"line\">文件系统        容量  已用  可用 已用% 挂载点</div><div class=\"line\">udev            3.9G     0  3.9G    0% /dev</div><div class=\"line\">tmpfs           786M  9.6M  777M    2% /run</div><div class=\"line\">/dev/sda6        29G  6.6G   21G   25% /</div><div class=\"line\">tmpfs           3.9G  243M  3.6G    7% /dev/shm</div><div class=\"line\">tmpfs           5.0M  4.0K  5.0M    1% /run/lock</div><div class=\"line\">tmpfs           3.9G     0  3.9G    0% /sys/fs/cgroup</div><div class=\"line\">/dev/sda8       181M  119M   49M   71% /boot</div><div class=\"line\">/dev/sda9       260G   22G  225G    9% /home</div><div class=\"line\">/dev/sda1        96M   29M   68M   30% /boot/efi</div><div class=\"line\">tmpfs           786M   64K  786M    1% /run/user/1000</div></pre></td></tr></table></figure>\n","categories":["CS"],"tags":["Linux"]},{"title":"history","url":"http://yuncry.me/history/index.html","content":"<p>　　　<br>　　<br><em>2016.11.03</em><br>开始搭建个人网站,记录学到的知识，写些随笔。</p>\n<p><em>2016.12.23</em><br>系统被我折腾坏了，损失网页文件。</p>\n<p><em>2017.02.12</em><br>这个寒假入坑ACM，想把做的题记录下来。于是重新搭建网站。</p>\n","categories":[],"tags":[]},{"title":"about","url":"http://yuncry.me/about/index.html","content":"<p>　　 </p>\n<p><font size=\"5\">Evan, 1997, winter.</font><br>　<br><i class=\"fa fa-user\"></i> Nickname:&nbsp;&nbsp;&nbsp;yuncry<br><i class=\"fa fa-envelope\"></i> Email:&nbsp;&nbsp;&nbsp;yuncry.hu@foxmail.com<br><i class=\"fa fa-map-marker\"></i> &nbsp;北京</p>\n","categories":[],"tags":[]},{"title":"tags","url":"http://yuncry.me/tag/index.html","content":"<p>&nbsp;<br><a href=\"/tags/C-Primer/\" style=\"font-size: 15px; color: #FF8000;\">C++ Primer</a> &nbsp;&nbsp;&nbsp;<br><a href=\"/tags/二叉搜索树/\" style=\"font-size: 15px; color: gray;\">二叉搜索树</a>  &nbsp;&nbsp;&nbsp;  <a href=\"/tags/最短路径/\" style=\"font-size: 15px; color: gray;\">最短路径</a>  &nbsp;&nbsp;&nbsp;  <a href=\"/tags/优先队列/\" style=\"font-size: 15px; color: gray;\">优先队列</a>  &nbsp;&nbsp;&nbsp;  <a href=\"/tags/最小生成树/\" style=\"font-size: 15px; color: gray;\">最小生成树</a> &nbsp;&nbsp;&nbsp; <a href=\"/tags/贪心/\" style=\"font-size: 15px; color: gray;\">贪心</a> &nbsp;&nbsp;&nbsp; <a href=\"/tags/DP/\" style=\"font-size: 15px; color: gray;\">DP</a> &nbsp;&nbsp;&nbsp; <a href=\"/tags/并查集/\" style=\"font-size: 15px; color: gray;\">并查集</a> &nbsp;&nbsp;&nbsp;<br><a href=\"/tags/Linux/\" style=\"font-size: 15px; color: #FF8040;\">Linux</a> &nbsp;&nbsp;&nbsp;<br><a href=\"/tags/心情随笔/\" style=\"font-size: 20px; color: #6FB7B7;\">心情随笔</a> &nbsp;&nbsp;&nbsp;  </p>\n","categories":[],"tags":[]}]