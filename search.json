[{"title":"POJ 2010 Moo UNiversity-Financial Aid","url":"http://yuncry.me/2017/02/15/POJ-2010-Moo-UNiversity-Financial-Aid/","content":"<p><strong>DESCRIPTION</strong><br>Bessie noted that although humans have many universities they can attend, cows have none. To remedy this problem, she and her fellow cows formed a new university called The University of Wisconsin-Farmside,”Moo U” for short. </p>\n<p>Not wishing to admit dumber-than-average cows, the founders created an incredibly precise admission exam called the Cow Scholastic Aptitude Test (CSAT) that yields scores in the range 1..2,000,000,000. </p>\n<p>Moo U is very expensive to attend; not all calves can afford it.In fact, most calves need some sort of financial aid (0 &lt;= aid &lt;=100,000). The government does not provide scholarships to calves,so all the money must come from the university’s limited fund (whose total money is <em>F</em>, 0 &lt;= F &lt;= 2,000,000,000). </p>\n<p>Worse still, Moo U only has classrooms for an <em>odd</em> number <em>N</em> (1 &lt;= N &lt;= 19,999) of the <em>C</em> (N &lt;= C &lt;= 100,000) calves who have applied.Bessie wants to admit exactly N calves in order to maximize educational opportunity. She still wants the median CSAT score of the admitted calves to be as high as possible. </p>\n<p>Recall that the median of a set of integers whose size is odd is the middle value when they are sorted. For example, the median of the set {3, 8, 9, 7, 5} is 7, as there are exactly two values above 7 and exactly two values below it. </p>\n<p>Given the score and required financial aid for each calf that applies, the total number of calves to accept, and the total amount of money Bessie has for financial aid, determine the maximum median score Bessie can obtain by carefully admitting an optimal set of calves. </p>\n<p><strong>INPUT</strong></p>\n<ul>\n<li><p>Line 1: Three space-separated integers <em>N</em>, <em>C</em>, and <em>F</em> </p>\n</li>\n<li><p>Lines 2..C+1: Two space-separated integers per line. The first is the calf’s CSAT score; the second integer is the required amount of financial aid the calf needs </p>\n</li>\n</ul>\n<p><strong>OUTPUT</strong><br>A single integer, <em>the maximum median score</em> that Bessie can achieve. If there is insufficient money to admit N calves,output <em>-1</em>. </p>\n<p><strong>SAMPLE</strong><br><em>Input</em><br>3  5  70<br>30  25<br>50  21<br>20  20<br>5  18<br>35  30<br><em>Output</em><br>35</p>\n<p><strong>NOTE</strong><br>If Bessie accepts the calves with CSAT scores of 5, 35, and 50, the median is 35. The total financial aid required is 18 + 30 + 21 = 69 &lt;= 70. </p>\n<p>题意：一所学校招生，助学金全由学校承担，最多承担的金额为F。现在共有C个学生报名</p>\n","categories":["ACM解题报告"],"tags":["优先队列"]},{"title":"如果可以，让我抱抱你","url":"http://yuncry.me/2017/02/15/如果可以，让我抱抱你/","content":"<blockquote>\n<p>   辅导员在寒假前布置了寒假作业，一份调查问卷，总结大一与大二第一学年，并对未来两年写一些规划。这份作业我拖了很久，因为在“就业”和“考研”的问题上我很犹豫。昨天辅导员终于忍不住又发了一遍通知。今天有空，于是就写了。写着写着就跑偏了，写着写着就泪目了。以下是我的答案。</p>\n</blockquote>\n<p>进入大学之前，有认真想过在大学要好好学习课堂知识，拿奖学金，争取保研资格，这也一直是父母对我的期望。带着这样的想法，我也就坚持了半学期。我很佩服那些对某课程一点兴趣都没有，却能拿高分的优秀同学。曾经为了高考，我可以，现在的我做不到。或许是没有了硬性的压力？或许真的是自己变懒了。大一学年，有很多课程平时没去听，考前突击，能拿到90左右的分数。带着这样的侥幸，大二上学期也就很少去听课，更多的时间是待在图书馆看自己想看的书。因此，大二上学期的成绩崩了。从84降到80.2，大概也谈不上争取保研了。</p>\n<p>其实刚进入大二时，我也猜到这学期可能学得很烂。对课程的厌倦是一直存在的。我不是一个厌倦学习的人，但是我很固执，对自己喜欢的东西非常地执着，对没兴趣的东西根本不愿去管。这很糟糕，父母意识到了，我自己也意识到了。我还没有足够的能力去这样固执。我一直想改，但现在还是这样。</p>\n<p>这份“寒假作业”我拖了很久才交，因为我不知道该怎么选择。其中最大的纠结就是“就业”或“考研”。不仅仅是这份“寒假作业”，在面临其他选择时，我总是犹豫不决。</p>\n<p>我以前一直都是个没有主见的人。我的父母，很温柔，也很强势。从小到大，我是大人们眼中的乖孩子。我被大人们贴上了“懂事听话”、“老实”、“乖”、“从小不用大人们操心”等标签。真的如此吗？</p>\n<p>我可能听话得有点过了。大人们告诉我什么，我就信什么；他们让我做什么，我也会顺从，几乎不反抗，根本不会表露出不愿意。或许这么做，是因为我没主见没有自己的想法。或许我也有自己的想法，但是我害怕被骂，害怕看到他们眼中的失望。我也害怕我的想法是错的，没有自信，总觉得大人们说的话是对的。</p>\n<p>从小到大，我一直为父母着想，一直为每一个人着想，或许表面上我做不了什么，我只是个孩子，但是内心早就翻腾了。母亲是个优秀的女人，可是苦于心中有些愿望一直没有实现，常常当我面自怨自艾，抱怨命运不公，指责父亲的不是。而父亲常常愁眉苦脸的，他很少把心中的不快吐露，一脸冷漠，作为孩子的我最怕这样。小时候，我非常讨厌他们吵架，反反复复地说着家长里短。我从来都不会去劝他们，我只知道，我只要乖乖听话、好好读书，合他们的心意，他们会开心。因此我常常郁郁寡欢，心事太重，凡事都会想很多，瞻前顾后，就是怕别人不开心，怕别人对我失望。也因如此，我不是个容易开心的人。这样一个抑郁的、心事太重的人，能交到多少好朋友呢？父母常劝我要走出去，敞开心扉，做人开心些。。。</p>\n<p>看过很多穿越类型的科幻小说和电影。当时我就想过，如果让我回到过去，我最想做的，就是紧紧地抱住那个“听话懂事”、觉得自己没有资格任性的小男孩，摸着他的头跟他说，去做你想做的，不要经常为了照顾别人的想法而委屈了自己。</p>\n<p>小时候的一些事情到现在仍然记忆犹新。和父母逛街，遇到喜欢的玩具，从来都不会说想要。有一次他们给我订了一种非常难喝的牛奶，我很恶心那个味道，但是我不敢说，把自己关在厕所里偷偷倒掉，被发现后，他们狠狠地骂了我，我变得更加顺从。有一天下大雨，我们一群小孩子在幼儿园等父母来接，教室里的孩子哇哇大哭，我一个人安静地坐在靠窗的位置，望着门口一动不动，这只是一个五岁左右的孩子，这正常？我爱父母，也嫌弃、心疼那个小男孩。</p>\n<p>现在想想，与其说我懂事听话，不如说我畏畏缩缩压抑天性，做事情没有自信，瞻前顾后不够果断，容易把事情越想越复杂，总是在寻求一条最安稳的路？</p>\n<p>好像说了很多和这份“寒假作业”无关的话。。。</p>\n<p>回到“就业”和“考研”的问题上来。我自己的想法是，争取本科毕业在北京找一家名企，工作两年后回到南方，深圳、上海或广州。我想早点独立，至少不用父母操心我的经济问题，早点有能力提高父母的生活质量。而父母一直坚持让我读完研究生再出去工作，学历高毕竟是个好事情。我们在这道“选择题”上讨论过很多次。读研这件事我也经常考虑。我的圈子比较小，在我接触过的大多数研究生中，要么也是划水度过两三年，要么认真搞研究但是平常的课程仿佛对他们也没有太大的帮助，在我的认知里，读研是学校到社会的缓冲区，可能读研最大的作用是给自己两三年的时间好好思考规划以后的道路，让自己平心静气的，不那么浮躁。要论学到的知识，我觉得在工作中学到的和在学校学到的，还说不准哪个多哪个少。抛开这些功利性的问题，我更喜欢自己养活自己的那种生活。</p>\n<p>大二下学期开始，与CS紧紧相关的课程终于多了，这些课不认真学就真的是自己懒了。除了这些专业课，剩下的任务就是提高自己的技能，另外把英语学好。我的数学学得不差，那么就看自己这一年多点能把自己的专业水平提高到什么程度吧，能直接参加工作最好，不满意的话，考研也不晚。</p>\n<p>另外，脱个单。（仿佛这才是最现实的问题）<br>&nbsp;<br>&nbsp;<br><img src=\"/img/abandon.jpg\" alt=\"\"></p>\n","categories":["essay"],"tags":["心情随笔"]},{"title":"POJ 3614 Sunscreen","url":"http://yuncry.me/2017/02/15/POJ-3614-Sunscreen/","content":"<p><strong>DESCRIPTION</strong><br>To avoid unsightly burns while tanning, each of the <em>C</em> (1 ≤ C ≤ 2500) cows must cover her hide with sunscreen when they’re at the beach. Cow <em>i</em> has a minimum and maximum <em>SPF</em> rating (1 ≤ <em>minSPFi</em> ≤ 1,000; <em>minSPFi</em> ≤ <em>maxSPFi</em> ≤ 1,000) that will work. If the SPF rating is too low, the cow suffers sunburn; if the SPF rating is too high, the cow doesn’t tan at all……..</p>\n<p>The cows have a picnic basket with <em>L</em> (1 ≤ L ≤ 2500) bottles of sunscreen lotion, each bottle <em>i</em> with an SPF rating <em>SPFi</em> (1 ≤ SPFi ≤ 1,000). Lotion bottle <em>i</em> can cover <em>coveri</em> cows with lotion. A cow may lotion from only one bottle.</p>\n<p>What is the maximum number of cows that can protect themselves while tanning given the available lotions?</p>\n<p><strong>INPUT</strong></p>\n<ul>\n<li>Line 1: Two space-separated integers: <em>C</em> and <em>L</em></li>\n<li>Lines 2..C+1: Line i describes cow i’s lotion requires with two integers: <em>minSPFi</em> and <em>maxSPFi</em> </li>\n<li>Lines C+2..C+L+1: Line i+C+1 describes a sunscreen lotion bottle <em>i</em> with space-separated integers: <em>SPFi</em> and <em>coveri</em></li>\n</ul>\n<p><strong>OUTPUT</strong><br>A single line with an integer that is the maximum number of cows that can be protected while tanning</p>\n<p><strong>SAMPLE</strong><br><em>Input</em><br>3 2<br>3 10<br>2 5<br>1 5<br>6 2<br>4 1<br><em>Output</em><br>2</p>\n<p>题意：牛也想享受日光浴。给出C头牛L瓶防晒霜，给出每头牛忍受阳光强度的最大值和最小值，防晒霜能让照在牛身上的阳光固定在某个值(SPF)，给出每瓶防晒霜的SPF和使用次数。求出最多可以有多少母牛享受日光浴。</p>\n<p>思路：将牛按照minSPF从小到大排序，将防晒霜按照SPF从小到大排序。<br>遍历防晒霜，把minSPF不大于SPF的牛的maxSPF放入优先队列中，将优先队列中的符合条件的maxSPF从小到大删除。（贪心思想，比如SPF为4，有两头牛——【1,6】【2,10】，这种情况下，选择用在【1,6】上要优于【2,10】)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_C = <span class=\"number\">2500</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_L = <span class=\"number\">2500</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> C,L;</div><div class=\"line\"><span class=\"keyword\">struct</span> Cow &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> minSPF,maxSPF;</div><div class=\"line\">&#125;cs[MAX_L];</div><div class=\"line\"><span class=\"keyword\">struct</span> Lotion &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> SPF,amount;</div><div class=\"line\">&#125;ls[MAX_L];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">CowCmp</span> <span class=\"params\">(<span class=\"keyword\">const</span> Cow &amp;c1, <span class=\"keyword\">const</span> Cow &amp;c2)</span> </span>&#123;<span class=\"keyword\">return</span> c1.minSPF&lt;c2.minSPF; &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">LotionCmp</span> <span class=\"params\">(<span class=\"keyword\">const</span> Lotion &amp;l1, <span class=\"keyword\">const</span> Lotion &amp;l2)</span> </span>&#123;<span class=\"keyword\">return</span> l1.SPF&lt;l2.SPF; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;C,&amp;L);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;C; ++i)</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;cs[i].minSPF,&amp;cs[i].maxSPF);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;L; ++i)</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;ls[i].SPF,&amp;ls[i].amount);</div><div class=\"line\"></div><div class=\"line\">    sort(cs,cs+C,CowCmp);</div><div class=\"line\">    sort(ls,ls+L,LotionCmp);</div><div class=\"line\">    priority_queue&lt;<span class=\"keyword\">int</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;,greater&lt;<span class=\"keyword\">int</span>&gt; &gt; que;</div><div class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>, ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;L; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (c&lt;C &amp;&amp; cs[c].minSPF&lt;=ls[i].SPF) &#123;</div><div class=\"line\">            que.push(cs[c].maxSPF);</div><div class=\"line\">            ++c;</div><div class=\"line\">        &#125;   </div><div class=\"line\">        <span class=\"keyword\">while</span> (!que.empty() &amp;&amp; ls[i].amount) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> v = que.top();</div><div class=\"line\">            que.pop();</div><div class=\"line\">            <span class=\"keyword\">if</span> (v &gt;= ls[i].SPF) &#123;</div><div class=\"line\">                ++ans;</div><div class=\"line\">                --ls[i].amount;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>\n","categories":["ACM解题报告"],"tags":["贪心","优先队列"]},{"title":"记录图论里的一些常见算法","url":"http://yuncry.me/2017/02/14/记录图论里的一些常见算法/","content":"<h1 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h1><h2 id=\"Bellman-Ford\"><a href=\"#Bellman-Ford\" class=\"headerlink\" title=\"Bellman-Ford\"></a>Bellman-Ford</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> edge &#123;<span class=\"keyword\">int</span> from, to, len;&#125;</div><div class=\"line\">edge es[MAX_E];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> d[MAX_V];</div><div class=\"line\"><span class=\"keyword\">int</span> V, E;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Bellman-Ford (<span class=\"keyword\">int</span> s) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;V; ++i)  d[i] = INF;</div><div class=\"line\">    d[s] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">bool</span> update = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;E; ++i) &#123;</div><div class=\"line\">            edge &amp;e = es[i];</div><div class=\"line\">            <span class=\"keyword\">if</span> (d[e.from] != INF &amp;&amp; d[e.to] &gt; d[e.from]+e.len) &#123;</div><div class=\"line\">                d[e.to] = d[e.from]+e.len;</div><div class=\"line\">                update = <span class=\"literal\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!update)  <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在图中不存在负圈的情况下，<em>while(true)</em>最多循环<em>|V|-1</em>次。若存在负圈，则第<em>|v|</em>次循环也会更新<em>d</em>的值，因此可以利用这个性质检查是否含有负圈。</p>\n<h2 id=\"Dijkstra\"><a href=\"#Dijkstra\" class=\"headerlink\" title=\"Dijkstra\"></a>Dijkstra</h2>","categories":["Algorithms"],"tags":["最短路径","最小生成树"]},{"title":"HDU 2845 Beans","url":"http://yuncry.me/2017/02/14/HDU-2845-Beans/","content":"<p><strong>DESCRIPTION</strong><br>Bean-eating is an interesting game, everyone owns an M*N matrix, which is filled with different qualities beans. Meantime, there is only one bean in any 1*1 grid. Now you want to eat the beans and collect the qualities, but everyone must obey by the following rules: if you eat the bean at the coordinate<em>(x, y)</em>, you can’t eat the beans anyway at the coordinates listed (if exiting): <em>(x, y-1)</em>, <em>(x, y+1)</em>, and the both rows whose abscissas are <em>x-1</em> and <em>x+1</em>.<br><img src=\"/img/HDU2845.jpeg\" alt=\"\"></p>\n<p>Now, how much qualities can you eat and then get ?</p>\n<p><strong>INPUT</strong><br>There are a few cases. In each case, there are two integer <em>M</em> (row number) and <em>N</em> (column number). The next <em>M</em> lines each contain <em>N</em> integers, representing the qualities of the beans. We can make sure that the quality of bean isn’t beyond 1000, and 1&lt;=M*N&lt;=200000. </p>\n<p><strong>OUTPUT</strong><br>For each case, you just output the MAX qualities you can eat and then get.</p>\n<p><strong>SAMPLE</strong><br><em>Input</em><br>4 6<br>11 　0　 7　 5　 13　 9<br>78 　4 　81 　6 　22　 4<br>1 　40　 9　 34 　16　 10<br>11　 22　 0　 33　 39　 6<br><em>Output</em><br>242</p>\n<p>&nbsp;<br>&nbsp;<br>题意：给定一个矩阵，每一行中不能选择相邻的数字，不能选择相邻的行，求出所选数的和的最大值。</p>\n<p>思路：先对每一行求出其最大不连续和。对每一行所求出的最大值，再求一次最大不连续和。</p>\n<p>状态转移方程为<br><em>dp[i+1] = max (dp[i], dp[i-1]+num)</em>　　//表示第 <em>i</em> 个位置所能达到的最大值</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_N = <span class=\"number\">200005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> dp[MAX_N], row[MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> N,M,num;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;M,&amp;N)) &#123;</div><div class=\"line\">        dp[<span class=\"number\">0</span>] = dp[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=M; ++j) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i) &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;num);</div><div class=\"line\">                dp[i+<span class=\"number\">1</span>] = max (dp[i], dp[i<span class=\"number\">-1</span>]+num);</div><div class=\"line\">            &#125;</div><div class=\"line\">            row[j] = dp[N+<span class=\"number\">1</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=M; ++i)</div><div class=\"line\">            dp[i+<span class=\"number\">1</span>] = max (dp[i], dp[i<span class=\"number\">-1</span>]+row[i]);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,dp[M+<span class=\"number\">1</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM解题报告"],"tags":["DP"]},{"title":"CodeForces 601A The Two Routes","url":"http://yuncry.me/2017/02/14/CodeForces-601A-The-Two-Routes/","content":"<p><strong>DESCRIPTION</strong><br>In Absurdistan, there are n towns (numbered 1 through n) and m bidirectional railways. There is also an absurdly simple road network — for each pair of different towns <em>x</em> and <em>y</em>, there is a bidirectional road between towns <em>x</em> and <em>y</em> if and only if there is no railway between them. Travelling to a different town using one railway or one road always takes exactly one hour.</p>\n<p>A train and a bus leave town <em>1</em> at the same time. They both have the same destination, town <em>n</em>, and don’t make any stops on the way (but they can wait in town <em>n</em>). The train can move only along railways and the bus can move only along roads.</p>\n<p>You’ve been asked to plan out routes for the vehicles; each route can use any road/railway multiple times. One of the most important aspects to consider is safety — in order to avoid accidents at railway crossings, the train and the bus must not arrive at the same town (except town <em>n</em>) simultaneously.</p>\n<p>Under these constraints, what is the minimum number of hours needed for both vehicles to reach town <em>n</em> (the maximum of arrival times of the bus and the train)? Note, that bus and train are not required to arrive to the town <em>n</em> at the same moment of time, but are allowed to do so.</p>\n<p><strong>INPUT</strong><br>The first line of the input contains two integers <em>n</em> and <em>m</em> (2 ≤ n ≤ 400, 0 ≤ m ≤ n(n - 1) / 2) — the number of towns and the number of railways respectively.</p>\n<p>Each of the next <em>m</em> lines contains two integers <em>u</em> and <em>v</em>, denoting a railway between towns <em>u</em> and <em>v</em> (1 ≤ u, v ≤ n, u ≠ v).</p>\n<p>You may assume that there is at most one railway connecting any two towns.</p>\n<p><strong>OUTPUT</strong><br>Output one integer — the smallest possible time of the later vehicle’s arrival in town <em>n</em>. If it’s impossible for at least one of the vehicles to reach town <em>n</em>, output  <em>-1</em>.</p>\n<p><strong>EXAMPLE</strong><br><em>Input</em><br>4 2<br>1 3<br>3 4<br><em>Output</em><br>2</p>\n<p><em>Input</em><br>4 6<br>1 2<br>1 3<br>1 4<br>2 3<br>2 4<br>3 4<br><em>Output</em><br>-1</p>\n<p><em>Input</em><br>5 5<br>4 2<br>3 5<br>4 5<br>5 1<br>1 2<br><em>Output</em><br>3</p>\n<p><strong>Note</strong><br>In the first sample, the train can take the route <em>1-3-4</em> and the bus can take the route <em>1-2-4</em> . Note that they can arrive at town 4 at the same time.</p>\n<p>In the second sample, Absurdistan is ruled by railwaymen. There are no roads, so there’s no way for the bus to reach town 4.<br>&nbsp;</p>\n<p>题意：有n个城镇，每个城镇之间要么由公路连着要么由铁路连着，每个城镇间的耗时都为１。给出m条铁路的路线，问从城镇1出发，分别坐火车和坐汽车到达城镇n，两者最少用时的较大值。途中不能换乘，并且火车和汽车不能同时到达除１和ｎ之外的点。</p>\n<p>思路：用Dijkstra求两次最短路径就行。虽然题目有要求说不能同时经过中途某个点，但是仔细想想，城镇1与城镇n之间必有一条路，因此两条路线中的最短耗时为１，即不可能同时经过某个点。（差点信了题目的鬼话）</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; iiP; <span class=\"comment\">//距离，点</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_N = <span class=\"number\">405</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">1e9</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> rail[MAX_N][MAX_N], road[MAX_N][MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> d[MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> N,M;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Dijsktra (<span class=\"keyword\">int</span> (&amp;<span class=\"built_in\">map</span>)[MAX_N][MAX_N]) &#123;</div><div class=\"line\">    <span class=\"built_in\">fill</span> (d+<span class=\"number\">1</span>, d+<span class=\"number\">1</span>+N, INF);</div><div class=\"line\">    d[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">    priority_queue&lt;iiP,vector&lt;iiP&gt;,greater&lt;iiP&gt; &gt; que;</div><div class=\"line\">    que.push(iiP(<span class=\"number\">0</span>,<span class=\"number\">1</span>));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">while</span>(!que.empty()) &#123;</div><div class=\"line\">        iiP p = que.top();</div><div class=\"line\">        que.pop();</div><div class=\"line\">        <span class=\"keyword\">int</span> v = p.second;</div><div class=\"line\">        <span class=\"built_in\">if</span> (d[v] &lt; p.first)  <span class=\"built_in\">continue</span>;</div><div class=\"line\">        <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> u=<span class=\"number\">1</span>; u&lt;=N; ++u) &#123;</div><div class=\"line\">            <span class=\"built_in\">if</span> (d[u] &gt; d[v]+<span class=\"built_in\">map</span>[v][u]) &#123;</div><div class=\"line\">                d[u] = d[v]+<span class=\"built_in\">map</span>[v][u];</div><div class=\"line\">                que.push(iiP(d[u],u));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">return</span> d[N];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> main ()</div><div class=\"line\">&#123;</div><div class=\"line\">    scanf(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;M);</div><div class=\"line\">    <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i)</div><div class=\"line\">        <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=N; ++j) &#123;</div><div class=\"line\">            rail[i][j] = rail[j][i] = INF;</div><div class=\"line\">            road[i][j] = road[j][i] = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;M; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u,v;</div><div class=\"line\">        scanf(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;v);</div><div class=\"line\">        road[u][v] = road[v][u] = INF;</div><div class=\"line\">        rail[u][v] = rail[v][u] = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> dRail = Dijsktra(rail), dRoad = Dijsktra(road);</div><div class=\"line\">    <span class=\"built_in\">if</span> (dRail==INF || dRoad==INF)</div><div class=\"line\">        printf(<span class=\"string\">\"-1\\n\"</span>);</div><div class=\"line\">    <span class=\"built_in\">else</span></div><div class=\"line\">        printf(<span class=\"string\">\"%d\\n\"</span>,<span class=\"built_in\">max</span>(dRail,dRoad));</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>\n","categories":["ACM解题报告"],"tags":["最短路径"]},{"title":"CodeForces 744A Hongcow Builds A Nation","url":"http://yuncry.me/2017/02/14/CodeForces-744A-Hongcow-Builds-A-Nation/","content":"<p><strong>DESCRIPTION</strong><br>Hongcow is ruler of the world. As ruler of the world, he wants to make it easier for people to travel by road within their own countries.</p>\n<p>The world can be modeled as an undirected graph with <em>n</em> nodes and <em>m</em> edges. <em>k</em> of the nodes are home to the governments of the <em>k</em> countries that make up the world.</p>\n<p>There is at most one edge connecting any two nodes and no edge connects a node to itself. Furthermore, for any two nodes corresponding to governments, there is no path between those two nodes. Any graph that satisfies all of these conditions is stable.</p>\n<p>Hongcow wants to add as many edges as possible to the graph while keeping it stable. Determine the maximum number of edges Hongcow can add.</p>\n<p><strong>INPUT</strong><br>The first line of input will contain three integers <em>n</em>, <em>m</em> and <em>k</em> (1 ≤ n ≤ 1 000, 0 ≤ m ≤ 100 000, 1 ≤ k ≤ n) — the number of vertices and edges in the graph, and the number of vertices that are homes of the government.</p>\n<p>The next line of input will contain <em>k</em> integers <em>c1, c2, …, ck</em> (1 ≤ ci ≤ n). These integers will be pairwise distinct and denote the nodes that are home to the governments in this world.</p>\n<p>The following m lines of input will contain two integers ui and vi (1 ≤ ui, vi ≤ n). This denotes an undirected edge between nodes <em>ui</em> and <em>vi</em>.</p>\n<p>It is guaranteed that the graph described by the input is stable.</p>\n<p><strong>OUTPUT</strong><br>Output a single integer, the maximum number of edges Hongcow can add to the graph while keeping it stable.    </p>\n<p><strong>EXAMPLE</strong><br><em>Input</em><br>4 1 2<br>1 3<br>1 2<br><em>output</em><br>2</p>\n<p><em>Input</em><br>3 3 1<br>2<br>1 2<br>1 3<br>2 3<br><em>Output</em><br>0</p>\n<p><strong>Note</strong><br>For the first sample test, the graph looks like this:</p>\n<p><img src=\"/img/CodeForces744A_1\" alt=\"\"><br>Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2 edges. We cannot add any more edges, since vertices 1 and 3 cannot have any path between them.<br>For the second sample test, the graph looks like this:</p>\n<p><img src=\"/img/CodeForces744A_2\" alt=\"\"><br>We cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.<br>&nbsp;<br>&nbsp;<br>&nbsp;<br>这道题换成人话就是：有<em>n</em>个点，<em>m</em>条边，其中<em>k</em>个点代表不同的政府。任意两个结点最多存在一条边，任意两个政府之间不能存在通路，结点不连自己。问满足上述条件时，最多能往图中添加多少条边。</p>\n<p>思路：<br>可以把图上的点分为两个集合，集合A包含所有含政府结点的点集，集合B包含其他与政府还未连通的结点。（比如有<em>1-10</em>十个结点，结点<em>1</em>和结点<em>2</em>是政府。<em>3、4、5</em>与<em>1</em>连通，<em>6</em>与<em>2</em>连通，剩下的结点<em>7、8、9、10</em>不管它们之间有没有通路先作为集合B，集合A包括<em>1-3-4-5</em>，<em>2-6</em>。）<br>在集合A中找到点数最多的点集（比如<em>1-3-4-5</em>），将集合B中所有的点加入到该点集中。（一顿操作后，点集有<em>6-2、1-3-4-5-7-8-9-10</em>)<br>于是　最多添加的边数＝所有点集完全图的边数－<em>m</em><br>与集合有关的题目，可以考虑下并查集。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_N = <span class=\"number\">1005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> N,M,K;</div><div class=\"line\"><span class=\"keyword\">int</span> cnt[MAX_N],par[MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> gov[MAX_N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i) &#123;</div><div class=\"line\">        par[i] = i;</div><div class=\"line\">        cnt[i] = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span> <span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (par[x] == x) </div><div class=\"line\">        <span class=\"keyword\">return</span> x;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"keyword\">return</span> par[x] = find(par[x]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unite</span> <span class=\"params\">(<span class=\"keyword\">int</span> &amp;x, <span class=\"keyword\">int</span> &amp;y)</span> </span>&#123;</div><div class=\"line\">    x = find(x);</div><div class=\"line\">    y = find(y);</div><div class=\"line\">    <span class=\"keyword\">if</span> (x==y)  <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cnt[x] &lt;= cnt[y]) &#123;</div><div class=\"line\">        par[x] = y;</div><div class=\"line\">        cnt[y] += cnt[x]; </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        par[y] = x;</div><div class=\"line\">        cnt[x] += cnt[y];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;N,&amp;M,&amp;K);</div><div class=\"line\">    init();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=K; ++i) </div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;gov[i]);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;M; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u,v;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;v);</div><div class=\"line\">            unite(u,v);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>,maxCnt=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=K; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = find(gov[i]);   </div><div class=\"line\">        maxCnt = max(cnt[x],maxCnt);</div><div class=\"line\">        N -= cnt[x];</div><div class=\"line\">        ans += cnt[x]*(cnt[x]<span class=\"number\">-1</span>)/<span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ans += (N+maxCnt)*(N+maxCnt<span class=\"number\">-1</span>)/<span class=\"number\">2</span>;</div><div class=\"line\">    ans -= maxCnt*(maxCnt<span class=\"number\">-1</span>)/<span class=\"number\">2</span>+M;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;<br>&nbsp;</p>\n","categories":["ACM解题报告"],"tags":["并查集","贪心"]},{"title":"CodeForces 356A Knight Tournament","url":"http://yuncry.me/2017/02/13/CodeForces-356A-Knight-Tournament/","content":"<p><strong>DESCRIPTION</strong><br>Hooray! Berl II, the king of Berland is making a knight tournament. The king has already sent the message to all knights in the kingdom and they in turn agreed to participate in this grand event.</p>\n<p>As for you, you’re just a simple peasant. There’s no surprise that you slept in this morning and were late for the tournament (it was a weekend, after all). Now you are really curious about the results of the tournament. This time the tournament in Berland went as follows:</p>\n<ul>\n<li>There are n knights participating in the tournament. Each knight was assigned his unique number — an integer from 1 to n.</li>\n<li>The tournament consisted of m fights, in the i-th fight the knights that were still in the game with numbers at least li and at most rihave fought for the right to continue taking part in the tournament.</li>\n<li>After the i-th fight among all participants of the fight only one knight won — the knight number xi, he continued participating in the tournament. Other knights left the tournament.</li>\n<li>The winner of the last (the m-th) fight (the knight number xm) became the winner of the tournament.</li>\n</ul>\n<p>You fished out all the information about the fights from your friends. Now for each knight you want to know the name of the knight he was conquered by. We think that the knight number b was conquered by the knight number a, if there was a fight with both of these knights present and the winner was the knight number a.</p>\n<p>Write the code that calculates for each knight, the name of the knight that beat him.<br>&nbsp;<br>&nbsp;<br><strong>INPUT</strong><br>The first line contains two integers n, m (2 ≤ n ≤ 3·10e5; 1 ≤ m ≤ 3·10e5) — the number of knights and the number of fights. Each of the following m lines contains three integers li, ri, xi (1 ≤ li &lt; ri ≤ n; li ≤ xi ≤ ri) — the description of the i-th fight.<br>&nbsp;<br>&nbsp;<br><strong>OUTPUT</strong><br>Print n integers. If the i-th knight lost, then the i-th number should equal the number of the knight that beat the knight number i. If the i-th knight is the winner, then the i-th number must equal 0.<br>&nbsp;<br>&nbsp;<br><strong>EXAMPLE</strong><br><em>Input</em><br>4 3<br>1 2 1<br>1 3 3<br><em>Output</em><br>3 1 4 0</p>\n<p><em>Input</em><br>8 4<br>3 5 4<br>3 7 6<br>2 8 8<br>1 8 1<br><em>Output</em><br>0 8 4 6 4 8 6 1</p>\n<p>首先把题目意思搞懂：有N个人参加比赛，共M场比赛，每次比赛给出 <em>l, r, x</em> 表示 <em>[l,r]</em> 区间内的人都被x打败。最后输入每个人是被谁打败的，冠军输出0 。</p>\n<p>读懂题意后，我最先想到的就是暴力思路，维护一个数组，数组下标为某选手，其值为击败该选手的人。每次遍历 <em>l-r</em> ,更新这个数组。<br><em>然而TLE…</em><br>上述方法的复杂度是O(N*M)(每次都给出最大的l-r区间），N和M值都很大，因此为了降低复杂度，想到用<em>set</em>来维护这个集合。</p>\n<p>set有个酷炫的函数<em>lower_bound(i)</em>,可以直接返回指向第一个大于等于i的值的迭代器，复杂度为O(logn)</p>\n<p>开始时把所有人都加进<em>set</em>集合内，每轮比赛过后从<em>set</em>中删除被淘汰的人。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_N = <span class=\"number\">300005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> beatBy[MAX_N],leave[MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> N,M;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;M);</div><div class=\"line\">    <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i) &#123;</div><div class=\"line\">        s.insert(i);</div><div class=\"line\">        beatBy[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">while</span> (M--) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> l,r,x,cnt=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;l,&amp;r,&amp;x);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it=s.lower_bound(l); it!=s.end() &amp;&amp; *it&lt;=r; ++it) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (*it != x) &#123;</div><div class=\"line\">                beatBy[*it] = x;</div><div class=\"line\">                leave[cnt++] = *it;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;cnt; ++j)</div><div class=\"line\">            s.erase(leave[j]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i)</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,beatBy[i]);</div><div class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM解题报告"],"tags":["二叉搜索树"]},{"title":"C++ Primer 第十二章练习题","url":"http://yuncry.me/2016/11/13/C-Primer-第十二章练习题/","content":"<h1 id=\"nbsp-12-1-1节练习\"><a href=\"#nbsp-12-1-1节练习\" class=\"headerlink\" title=\"&nbsp;12.1.1节练习\"></a>&nbsp;12.1.1节练习</h1><h2 id=\"nbsp-练习12-1\"><a href=\"#nbsp-练习12-1\" class=\"headerlink\" title=\"&nbsp;练习12.1\"></a>&nbsp;练习12.1</h2><blockquote>\n<p>在此代码的结尾，b1和b2各包含多少个元素？<br>StrBlob b1;<br>{<br>StrBlob b2 = {“a”,”an”,”the”};<br>b1 = b2;<br>b2.push_back(“about”);<br>}</p>\n</blockquote>\n<p><strong>b2</strong>被自动销毁了，说包含几个元素没意义。<br><strong>b1</strong>指向最初由<strong>b2</strong>创建的四个元素。</p>\n<h2 id=\"nbsp-练习12-2\"><a href=\"#nbsp-练习12-2\" class=\"headerlink\" title=\"&nbsp;练习12.2\"></a>&nbsp;练习12.2</h2><blockquote>\n<p>编写你自己的StrBlob类，包含const版本的front和back。。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;initializer_list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;exception&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"keyword\">class</span> StrBlob &#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span>:</div><div class=\"line\">\t\t<span class=\"keyword\">using</span> size_type = <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;::size_type;</div><div class=\"line\">\t\tStrBlob ();</div><div class=\"line\">\t\tStrBlob (<span class=\"built_in\">std</span>::initializeur_list&lt;<span class=\"built_in\">string</span>&gt; il);</div><div class=\"line\">\t\t<span class=\"function\">size_type <span class=\"title\">size</span> <span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> data-&gt;size(); &#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> data-&gt;empty(); &#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_back</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;t)</span> </span>&#123; data-&gt;push_back(t); &#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pop_back</span> <span class=\"params\">()</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"built_in\">string</span>&amp; <span class=\"title\">front</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; <span class=\"title\">front</span> <span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"built_in\">string</span>&amp; <span class=\"title\">back</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; <span class=\"title\">back</span> <span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</div><div class=\"line\">   </div><div class=\"line\">\t<span class=\"keyword\">private</span>:</div><div class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; data;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">check</span> <span class=\"params\">(size_type i, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;msg)</span> <span class=\"keyword\">const</span></span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">StrBlob:: StrBlob(): data(make_shared&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt;()) &#123;&#125;</div><div class=\"line\">StrBlob:: StrBlob(<span class=\"built_in\">std</span>::initializeur_list&lt;<span class=\"built_in\">string</span>&gt; il): data(make_shared&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt;(il)) &#123;&#125;</div><div class=\"line\">     </div><div class=\"line\"><span class=\"keyword\">void</span> StrBlob::check(size_type i, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;msg) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (data-&gt;size() &lt;= i)</div><div class=\"line\">\t\t<span class=\"keyword\">throw</span> out_of_range (msg);</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">void</span> StrBlob::pop_back ()</div><div class=\"line\">&#123;</div><div class=\"line\">\tcheck(<span class=\"number\">0</span>,<span class=\"string\">\"pop_back on empty StrBlob\"</span>);</div><div class=\"line\">\tdata-&gt;pop_back();</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">string</span>&amp; StrBlob::front() </div><div class=\"line\">&#123;</div><div class=\"line\">\t</div><div class=\"line\">\tcheck(<span class=\"number\">0</span>,<span class=\"string\">\"front on empty StrBlob\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> data-&gt;front();</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; StrBlob::front () <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  </div><div class=\"line\">\tcheck(<span class=\"number\">0</span>,<span class=\"string\">\"front on empty StrBlob\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> data-&gt;front();</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">string</span>&amp; StrBlob::back()</div><div class=\"line\">&#123;</div><div class=\"line\">   \t</div><div class=\"line\">\tcheck(<span class=\"number\">0</span>,<span class=\"string\">\"back on empty StrBlob\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> data-&gt;back();</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; StrBlob::back() <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  \t</div><div class=\"line\">\tcheck(<span class=\"number\">0</span>,<span class=\"string\">\"back on empty StrBlob\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> data-&gt;back();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"nbsp-练习12-3\"><a href=\"#nbsp-练习12-3\" class=\"headerlink\" title=\"&nbsp;练习12.3\"></a>&nbsp;练习12.3</h2><blockquote>\n<p>StrBlob需要const版本的 push_back 和 pop_back 吗？如果需要，添加进去。否则，请解释。</p>\n</blockquote>\n<p>这道题挺有意思的。从语法角度来看加了const版本的push_back 和pop_back可以通过编译并没有出现错误。但是如果从类的使用者角度来考虑这个问题,加了它们会发生神奇的事情！<br>假设我们已经定义了const版本的 push_back 。然后我们 const StrBlob wtfBlob，定义了这么一个对象。接着我们使用push_back:<br>wtfBlob.push_back(lalala);</p>\n<p>从语法来看，wtfBlob是个指针常量，本身不能改变，指向的对象可以改变。而这里的push_back改变的是wtfBlob指向的对象，所以可以通过编译。<br>类的使用者并不知道StrBlob的实现细节，在他看来，wtfBlob就是一个容器。“一个const容器，竟然可以使用push_back,见鬼啦？”</p>\n<p>不加入const版本，用户写 wtfBlob.push_back(lalala); 不能通过编译，恰好能起到提醒的作用。所以不需要添加进去。</p>\n<h2 id=\"nbsp-练习12-4\"><a href=\"#nbsp-练习12-4\" class=\"headerlink\" title=\"&nbsp;练习12.4\"></a>&nbsp;练习12.4</h2><blockquote>\n<p>在 check 函数中，没有检查 i 是否大于０。为什么可以忽略这个检查？ 　　</p>\n</blockquote>\n<p>i 的类型是 size_type，任何小于0的实参将会被转化成大于０的数字,所以可以忽略这个检查。</p>\n<h2 id=\"nbsp-练习12-5\"><a href=\"#nbsp-练习12-5\" class=\"headerlink\" title=\"&nbsp;练习12.5\"></a>&nbsp;练习12.5</h2><blockquote>\n<p>我们未编写接受一个 initializer_list explicit 参数的构造函数。讨论这个设计策略的优点和缺点。</p>\n</blockquote>\n<p>如果我们编写了这样一个构造函数：<br><strong>优点</strong>:没有任何构造函数能隐式地创建StrBlob对象，代码将更清晰。<br><strong>缺点</strong>:总是需要构造临时的StrBlob对象。另外地，不能使用拷贝初始化。使用起来不方便<br>&nbsp;<br>&nbsp;</p>\n<h1 id=\"nbsp-12-1-2节练习\"><a href=\"#nbsp-12-1-2节练习\" class=\"headerlink\" title=\"&nbsp;12.1.2节练习\"></a>&nbsp;12.1.2节练习</h1><h2 id=\"nbsp-练习12-6\"><a href=\"#nbsp-练习12-6\" class=\"headerlink\" title=\"&nbsp;练习12.6\"></a>&nbsp;练习12.6</h2><blockquote>\n<p>编写函数，返回一个动态分配的 int 的 vector。将此 vector 传递给另一个函数，这个函数读取标准输入，将读入的值保存在 vector　元素中。再将 vector 传递给另一个函数，打印读入的值。记得在恰当的时刻delete vector。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>;\t\t<span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>; </div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec_make()</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &#123; &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; i) </div><div class=\"line\">\t\tiVec-&gt;push_back(i);</div><div class=\"line\">\t<span class=\"keyword\">return</span> iVec;\t</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : *iVec)</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">cout</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">auto</span> vec = read(iVec_make());</div><div class=\"line\">\tprint(vec) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t<span class=\"keyword\">delete</span> vec;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"nbsp-练习12-7\"><a href=\"#nbsp-练习12-7\" class=\"headerlink\" title=\"&nbsp;练习12.7\"></a>&nbsp;练习12.7</h2><blockquote>\n<p>重做上一题，这次使用shared_ptr而不是内置指针。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>;\t\t<span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>; </div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec_make()</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">std</span>::make_shared&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; ();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; i) </div><div class=\"line\">\t\tiVec-&gt;push_back(i);</div><div class=\"line\">\t<span class=\"keyword\">return</span> iVec;\t</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : *iVec)</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">cout</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">auto</span> vec = read( iVec_make() );</div><div class=\"line\">\tprint(vec) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"nbsp-练习12-8\"><a href=\"#nbsp-练习12-8\" class=\"headerlink\" title=\"&nbsp;练习12.8\"></a>&nbsp;<strong>练习12.8</strong></h2><blockquote>\n<p>下面的函数是否有错误？如果有，解释错误原因。<br>bool b() {<br>int *p = new int;<br>// …<br>return p;<br>}</p>\n</blockquote>\n<p>有错误。p由指针类型转换为布尔类型，程序没办法释放这片分配的动态内存。导致内存泄露问题。若返回类型是<strong> int* </strong>，那么调用者可以释放内存。</p>\n<h2 id=\"nbsp-练习12-9\"><a href=\"#nbsp-练习12-9\" class=\"headerlink\" title=\"&nbsp;练习12.9\"></a>&nbsp;练习12.9</h2><blockquote>\n<p>解释下面代码执行的结果<br>int q = new int(42), r - new int(100);<br>r = q;<br>auto q2 = make_shared(42), r2 = make_shared(100);<br>r2 = q2;</p>\n</blockquote>\n<ul>\n<li>q和r指向同一块动态分配的内存，没有指针指向另一块动态分配的内存，导致内存泄漏问题。</li>\n<li><em>r2 = q2</em> 使q2的引用计数递增为２，r2的引用计数递减为０。结果是之前给r2分配的内存自动地被释放。这代码是安全的。<br>&nbsp;<br>&nbsp;<h1 id=\"nbsp-12-1-3节练习\"><a href=\"#nbsp-12-1-3节练习\" class=\"headerlink\" title=\"&nbsp;12.1.3节练习\"></a>&nbsp;12.1.3节练习</h1><h2 id=\"nbsp-练习12-10\"><a href=\"#nbsp-练习12-10\" class=\"headerlink\" title=\"&nbsp;练习12.10\"></a>&nbsp;练习12.10</h2></li>\n</ul>\n<blockquote>\n<p>下面的代码调用了第413页定义的process函数，解释此调用是否正确。如果不正确，应如何修改?<br>shared_ptr p(new int(42));<br>process(shared_ptr (p));<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process</span> <span class=\"params\">(<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; ptr)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"in process,ptr.use_count = \"</span> &lt;&lt; ptr.use_count() &lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p1 (<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">42</span>));</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"before process,p1.use_count = \"</span> &lt;&lt; p1.use_count() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\tprocess (<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; (p1));</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"after process,p1.use_count = \"</span> &lt;&lt; p1.use_count() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">   </div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>输出结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">aphro@7559:~$ ./a</div><div class=\"line\">before process,p1.use_count = 1</div><div class=\"line\"><span class=\"keyword\">in</span> process,ptr.use_count = 2</div><div class=\"line\">after process,p1.use_count = 1</div></pre></td></tr></table></figure>\n<p>调用是正确的，创建临时对象<em>shared_ptr (p)</em>时递增了p的引用计数。</p>\n<h2 id=\"nbsp-练习12-11\"><a href=\"#nbsp-练习12-11\" class=\"headerlink\" title=\"&nbsp;练习12.11\"></a>&nbsp;练习12.11</h2><blockquote>\n<p>如果我们像下面这样调用 process，会发生什么?<br>process (shared_ptr(p.get()));</p>\n</blockquote>\n<p>p指向的内存在process()函数结束时被自动释放,再次使用p将发生未定义的行为。而且当p被销毁时，这块内存上发生double free。</p>\n<h2 id=\"nbsp-练习12-12\"><a href=\"#nbsp-练习12-12\" class=\"headerlink\" title=\"&nbsp;练习12.12\"></a>&nbsp;练习12.12</h2><blockquote>\n<p>p和sp的定义如下，对于接下来的对process的每个调用，如果合法，解释它做了什么，如果不合法，解释其错误原因：<br>auto p = new int();<br>auto sp = make_shared\\<int\\> ();</int\\></p>\n<ul>\n<li>process(sp);</li>\n<li>process(new int());</li>\n<li>process(p);</li>\n<li>process(shared_ptr (p));</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>合法，拷贝sp会递增其引用计数，在process中引用计数为2。</p>\n</li>\n<li><p>不合法，接受指针参数的智能指针构造函数是explicit的。不能将一个内置指针隐式地转换为一个智能指针。</p>\n</li>\n<li><p>不合法，理由同２。</p>\n</li>\n<li><p>虽然合法，但容易出问题，比如<em>double free</em>。</p>\n</li>\n</ul>\n<h2 id=\"nbsp-练习12-13\"><a href=\"#nbsp-练习12-13\" class=\"headerlink\" title=\"&nbsp;练习12.13\"></a>&nbsp;练习12.13</h2><blockquote>\n<p>如果执行下面的代码，会发生什么?<br>auto sp = make_shared\\<int\\> ();<br>auto p = sp.get();<br>delete p;</int\\></p>\n</blockquote>\n<p>delete p后，sp成了空悬指针，若再次使用sp，将会发生未定义的行为。并且，当sp被销毁时，这块内存会被第二次delete。<br>&nbsp;<br>&nbsp;</p>\n","categories":["C++"],"tags":["C++ Primer"]},{"title":"Linux升级内核时/boot空间不足解决办法","url":"http://yuncry.me/2016/11/05/Linux升级内核时-boot空间不足解决办法/","content":"<blockquote>\n<p>今天安装更新时，系统提示我/boot空间已满。内核文件默认储存在/boot中，多次升级内核后，内核版本太多，清理没有的内核文件就行。</p>\n</blockquote>\n<h2 id=\"首先看一下磁盘情况\"><a href=\"#首先看一下磁盘情况\" class=\"headerlink\" title=\"首先看一下磁盘情况\"></a>首先看一下磁盘情况</h2><p>输入　<strong>df -h</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ df -h</div><div class=\"line\">文件系统        容量  已用  可用 已用% 挂载点</div><div class=\"line\">udev            3.9G     0  3.9G    0% /dev</div><div class=\"line\">tmpfs           786M  9.6M  777M    2% /run</div><div class=\"line\">/dev/sda6        29G  6.9G   20G   26% /</div><div class=\"line\">tmpfs           3.9G  221M  3.7G    6% /dev/shm</div><div class=\"line\">tmpfs           5.0M  4.0K  5.0M    1% /run/lock</div><div class=\"line\">tmpfs           3.9G     0  3.9G    0% /sys/fs/cgroup</div><div class=\"line\">/dev/sda8       181M  172M     0  100% /boot</div><div class=\"line\">/dev/sda9       260G   22G  225G    9% /home</div><div class=\"line\">/dev/sda1        96M   29M   68M   30% /boot/efi</div><div class=\"line\">tmpfs           786M   64K  786M    1% /run/user/1000</div></pre></td></tr></table></figure></p>\n<p>/boot已用100％需要清理了。</p>\n<h2 id=\"查看当前使用的内核版本号\"><a href=\"#查看当前使用的内核版本号\" class=\"headerlink\" title=\"查看当前使用的内核版本号\"></a>查看当前使用的内核版本号</h2><p>输入　<strong>uname -a</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ uname <span class=\"_\">-a</span></div><div class=\"line\">Linux 7559 4.4.0-38-generic <span class=\"comment\">#57-Ubuntu SMP Tue Sep 6 15:42:33 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></div></pre></td></tr></table></figure></p>\n<p>当前内核版本号4.4.0-38</p>\n<h2 id=\"删除旧内核\"><a href=\"#删除旧内核\" class=\"headerlink\" title=\"删除旧内核\"></a>删除旧内核</h2><p>输入　<strong>sudo apt-get remove linux-image-　　</strong>接着按两下<em>Tab</em>将显示当前储存的所有内核版本，把之前的版本删除就行。<strong>刚升级的版本可能不稳定，为了保险保留之前1-2版本备用。</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get remove linux-image-</div><div class=\"line\">linux-image-4.4.0-36-generic        linux-image-extra-4.4.0-36-generic</div><div class=\"line\">linux-image-4.4.0-38-generic        linux-image-extra-4.4.0-38-generic</div><div class=\"line\">linux-image-4.4.0-45-generic        linux-image-generic</div><div class=\"line\">aphro@7559:~$ sudo apt-get remove linux-image-4.4.0-36-generic </div><div class=\"line\">[sudo] aphro 的密码： </div><div class=\"line\">正在读取软件包列表... 完成</div><div class=\"line\">正在分析软件包的依赖关系树 </div><div class=\"line\">正在读取状态信息... 完成 </div><div class=\"line\">下列软件包是自动安装的并且现在不需要了：</div><div class=\"line\">  linux-headers-4.4.0-36 linux-headers-4.4.0-36-generic</div><div class=\"line\">  使用<span class=\"string\">'sudo apt autoremove'</span>来卸载它(它们)。</div><div class=\"line\">  下列软件包将被【卸载】：</div><div class=\"line\">   linux-image-4.4.0-36-generic linux-image-extra-4.4.0-36-generic</div><div class=\"line\">   linux-signed-image-4.4.0-36-generic</div><div class=\"line\">   升级了 0 个软件包，新安装了 0 个软件包，要卸载 3 个软件包，有 136 个软件包未被升级。</div><div class=\"line\">   有 5 个软件包没有被完全安装或卸载。</div><div class=\"line\">   解压缩后将会空出 218 MB 的空间。</div><div class=\"line\">   您希望继续执行吗？ [Y/n] Y</div></pre></td></tr></table></figure></p>\n<h2 id=\"再次查看-boot分区容量\"><a href=\"#再次查看-boot分区容量\" class=\"headerlink\" title=\"再次查看/boot分区容量\"></a>再次查看/boot分区容量</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ df -h</div><div class=\"line\">文件系统        容量  已用  可用 已用% 挂载点</div><div class=\"line\">udev            3.9G     0  3.9G    0% /dev</div><div class=\"line\">tmpfs           786M  9.6M  777M    2% /run</div><div class=\"line\">/dev/sda6        29G  6.6G   21G   25% /</div><div class=\"line\">tmpfs           3.9G  243M  3.6G    7% /dev/shm</div><div class=\"line\">tmpfs           5.0M  4.0K  5.0M    1% /run/lock</div><div class=\"line\">tmpfs           3.9G     0  3.9G    0% /sys/fs/cgroup</div><div class=\"line\">/dev/sda8       181M  119M   49M   71% /boot</div><div class=\"line\">/dev/sda9       260G   22G  225G    9% /home</div><div class=\"line\">/dev/sda1        96M   29M   68M   30% /boot/efi</div><div class=\"line\">tmpfs           786M   64K  786M    1% /run/user/1000</div></pre></td></tr></table></figure>\n","categories":["CS"],"tags":["Linux"]},{"title":"about","url":"http://yuncry.me/about/index.html","content":"<p>　　 </p>\n<p><font size=\"5\">Evan, 1997, winter.</font><br>　<br><i class=\"fa fa-user\"></i> Nickname:&nbsp;&nbsp;&nbsp;yuncry<br><i class=\"fa fa-envelope\"></i> Email:&nbsp;&nbsp;&nbsp;yuncry.hu@foxmail.com<br><i class=\"fa fa-map-marker\"></i> &nbsp;北京</p>\n","categories":[],"tags":[]},{"title":"history","url":"http://yuncry.me/history/index.html","content":"<p>　　　<br>　　<br><em>2016.11.03</em><br>开始搭建个人网站,记录学到的知识，写些随笔。</p>\n<p><em>2016.12.23</em><br>系统被我折腾坏了，损失网页文件。</p>\n<p><em>2017.02.12</em><br>这个寒假入坑ACM，想把做的题记录下来。于是重新搭建网站。</p>\n","categories":[],"tags":[]}]