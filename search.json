[{"title":"CodeForce 356A Knight Tournament","url":"http://yuncry.me/2017/02/13/CodeForce-356A-Knight-Tournament/","content":"<p><strong>DESCRIPTION</strong><br>Hooray! Berl II, the king of Berland is making a knight tournament. The king has already sent the message to all knights in the kingdom and they in turn agreed to participate in this grand event.</p>\n<p>As for you, you’re just a simple peasant. There’s no surprise that you slept in this morning and were late for the tournament (it was a weekend, after all). Now you are really curious about the results of the tournament. This time the tournament in Berland went as follows:</p>\n<ul>\n<li>There are n knights participating in the tournament. Each knight was assigned his unique number — an integer from 1 to n.</li>\n<li>The tournament consisted of m fights, in the i-th fight the knights that were still in the game with numbers at least li and at most rihave fought for the right to continue taking part in the tournament.</li>\n<li>After the i-th fight among all participants of the fight only one knight won — the knight number xi, he continued participating in the tournament. Other knights left the tournament.</li>\n<li>The winner of the last (the m-th) fight (the knight number xm) became the winner of the tournament.</li>\n</ul>\n<p>You fished out all the information about the fights from your friends. Now for each knight you want to know the name of the knight he was conquered by. We think that the knight number b was conquered by the knight number a, if there was a fight with both of these knights present and the winner was the knight number a.</p>\n<p>Write the code that calculates for each knight, the name of the knight that beat him.<br>&nbsp;<br>&nbsp;<br><strong>INPUT</strong><br>The first line contains two integers n, m (2 ≤ n ≤ 3·10e5; 1 ≤ m ≤ 3·10e5) — the number of knights and the number of fights. Each of the following m lines contains three integers li, ri, xi (1 ≤ li &lt; ri ≤ n; li ≤ xi ≤ ri) — the description of the i-th fight.<br>&nbsp;<br>&nbsp;<br><strong>OUTPUT</strong><br>Print n integers. If the i-th knight lost, then the i-th number should equal the number of the knight that beat the knight number i. If the i-th knight is the winner, then the i-th number must equal 0.<br>&nbsp;<br>&nbsp;<br><strong>EXAMPLE</strong><br><em>Input</em><br>4 3<br>1 2 1<br>1 3 3<br><em>Output</em><br>3 1 4 0</p>\n<p><em>Input</em><br>8 4<br>3 5 4<br>3 7 6<br>2 8 8<br>1 8 1<br><em>Output</em><br>0 8 4 6 4 8 6 1</p>\n<p>首先把题目意思搞懂：有N个人参加比赛，共M场比赛，每次比赛给出 <em>l, r, x</em> 表示 <em>[l,r]</em> 区间内的人都被x打败。最后输入每个人是被谁打败的，冠军输出0 。</p>\n<p>读懂题意后，我最先想到的就是暴力思路，维护一个数组，数组下标为某选手，其值为击败该选手的人。每次遍历 <em>l-r</em> ,更新这个数组。<br><em>然而TLE…</em><br>上述方法的复杂度是O(N*M)(每次都给出最大的l-r区间），N和M值都很大，因此为了降低复杂度，想到用<em>set</em>来维护这个集合。</p>\n<p>set有个酷炫的函数<em>lower_bound(i)</em>,可以直接返回指向第一个大于等于i的值的迭代器，复杂度为O(logn)</p>\n<p>开始时把所有人都加进<em>set</em>集合内，每轮比赛过后从<em>set</em>中删除被淘汰的人。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_N = <span class=\"number\">300005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> beatBy[MAX_N],leave[MAX_N];</div><div class=\"line\"><span class=\"keyword\">int</span> N,M;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;M);</div><div class=\"line\">    <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i) &#123;</div><div class=\"line\">\t\ts.insert(i);</div><div class=\"line\">\t\tbeatBy[i] = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125; </div><div class=\"line\">\t<span class=\"keyword\">while</span> (M--) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> l,r,x,cnt=<span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;l,&amp;r,&amp;x);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it=s.lower_bound(l); it!=s.end() &amp;&amp; *it&lt;=r; ++it) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (*it != x) &#123;</div><div class=\"line\">\t\t\t\tbeatBy[*it] = x;</div><div class=\"line\">\t\t\t\tleave[cnt++] = *it;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;cnt; ++j)</div><div class=\"line\">\t\t\ts.erase(leave[j]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=N; ++i)</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,beatBy[i]);</div><div class=\"line\">\t<span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["ACM解题报告"],"tags":["数据结构"]},{"title":"C++ Primer 第十二章练习题","url":"http://yuncry.me/2017/02/13/C-Primer-第十二章练习题/","content":"<h1 id=\"nbsp-12-1-1节练习\"><a href=\"#nbsp-12-1-1节练习\" class=\"headerlink\" title=\"&nbsp;12.1.1节练习\"></a>&nbsp;12.1.1节练习</h1><h2 id=\"nbsp-练习12-1\"><a href=\"#nbsp-练习12-1\" class=\"headerlink\" title=\"&nbsp;练习12.1\"></a>&nbsp;练习12.1</h2><blockquote>\n<p>在此代码的结尾，b1和b2各包含多少个元素？<br>StrBlob b1;<br>{<br>StrBlob b2 = {“a”,”an”,”the”};<br>b1 = b2;<br>b2.push_back(“about”);<br>}</p>\n</blockquote>\n<p><strong>b2</strong>被自动销毁了，说包含几个元素没意义。<br><strong>b1</strong>指向最初由<strong>b2</strong>创建的四个元素。</p>\n<h2 id=\"nbsp-练习12-2\"><a href=\"#nbsp-练习12-2\" class=\"headerlink\" title=\"&nbsp;练习12.2\"></a>&nbsp;练习12.2</h2><blockquote>\n<p>编写你自己的StrBlob类，包含const版本的front和back。。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;initializer_list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;exception&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"keyword\">class</span> StrBlob &#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span>:</div><div class=\"line\">\t\t<span class=\"keyword\">using</span> size_type = <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;::size_type;</div><div class=\"line\">\t\tStrBlob ();</div><div class=\"line\">\t\tStrBlob (<span class=\"built_in\">std</span>::initializeur_list&lt;<span class=\"built_in\">string</span>&gt; il);</div><div class=\"line\">\t\t<span class=\"function\">size_type <span class=\"title\">size</span> <span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> data-&gt;size(); &#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> data-&gt;empty(); &#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_back</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;t)</span> </span>&#123; data-&gt;push_back(t); &#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pop_back</span> <span class=\"params\">()</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"built_in\">string</span>&amp; <span class=\"title\">front</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; <span class=\"title\">front</span> <span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"built_in\">string</span>&amp; <span class=\"title\">back</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; <span class=\"title\">back</span> <span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</div><div class=\"line\">   </div><div class=\"line\">\t<span class=\"keyword\">private</span>:</div><div class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; data;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">check</span> <span class=\"params\">(size_type i, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;msg)</span> <span class=\"keyword\">const</span></span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">StrBlob:: StrBlob(): data(make_shared&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt;()) &#123;&#125;</div><div class=\"line\">StrBlob:: StrBlob(<span class=\"built_in\">std</span>::initializeur_list&lt;<span class=\"built_in\">string</span>&gt; il): data(make_shared&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt;(il)) &#123;&#125;</div><div class=\"line\">     </div><div class=\"line\"><span class=\"keyword\">void</span> StrBlob::check(size_type i, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;msg) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (data-&gt;size() &lt;= i)</div><div class=\"line\">\t\t<span class=\"keyword\">throw</span> out_of_range (msg);</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">void</span> StrBlob::pop_back ()</div><div class=\"line\">&#123;</div><div class=\"line\">\tcheck(<span class=\"number\">0</span>,<span class=\"string\">\"pop_back on empty StrBlob\"</span>);</div><div class=\"line\">\tdata-&gt;pop_back();</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">string</span>&amp; StrBlob::front() </div><div class=\"line\">&#123;</div><div class=\"line\">\t</div><div class=\"line\">\tcheck(<span class=\"number\">0</span>,<span class=\"string\">\"front on empty StrBlob\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> data-&gt;front();</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; StrBlob::front () <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  </div><div class=\"line\">\tcheck(<span class=\"number\">0</span>,<span class=\"string\">\"front on empty StrBlob\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> data-&gt;front();</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">string</span>&amp; StrBlob::back()</div><div class=\"line\">&#123;</div><div class=\"line\">   \t</div><div class=\"line\">\tcheck(<span class=\"number\">0</span>,<span class=\"string\">\"back on empty StrBlob\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> data-&gt;back();</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; StrBlob::back() <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  \t</div><div class=\"line\">\tcheck(<span class=\"number\">0</span>,<span class=\"string\">\"back on empty StrBlob\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> data-&gt;back();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"nbsp-练习12-3\"><a href=\"#nbsp-练习12-3\" class=\"headerlink\" title=\"&nbsp;练习12.3\"></a>&nbsp;练习12.3</h2><blockquote>\n<p>StrBlob需要const版本的 push_back 和 pop_back 吗？如果需要，添加进去。否则，请解释。</p>\n</blockquote>\n<p>这道题挺有意思的。从语法角度来看加了const版本的push_back 和pop_back可以通过编译并没有出现错误。但是如果从类的使用者角度来考虑这个问题,加了它们会发生神奇的事情！<br>假设我们已经定义了const版本的 push_back 。然后我们 const StrBlob wtfBlob，定义了这么一个对象。接着我们使用push_back:<br>wtfBlob.push_back(lalala);</p>\n<p>从语法来看，wtfBlob是个指针常量，本身不能改变，指向的对象可以改变。而这里的push_back改变的是wtfBlob指向的对象，所以可以通过编译。<br>类的使用者并不知道StrBlob的实现细节，在他看来，wtfBlob就是一个容器。“一个const容器，竟然可以使用push_back,见鬼啦？”</p>\n<p>不加入const版本，用户写 wtfBlob.push_back(lalala); 不能通过编译，恰好能起到提醒的作用。所以不需要添加进去。</p>\n<h2 id=\"nbsp-练习12-4\"><a href=\"#nbsp-练习12-4\" class=\"headerlink\" title=\"&nbsp;练习12.4\"></a>&nbsp;练习12.4</h2><blockquote>\n<p>在 check 函数中，没有检查 i 是否大于０。为什么可以忽略这个检查？ 　　</p>\n</blockquote>\n<p>i 的类型是 size_type，任何小于0的实参将会被转化成大于０的数字,所以可以忽略这个检查。</p>\n<h2 id=\"nbsp-练习12-5\"><a href=\"#nbsp-练习12-5\" class=\"headerlink\" title=\"&nbsp;练习12.5\"></a>&nbsp;练习12.5</h2><blockquote>\n<p>我们未编写接受一个 initializer_list explicit 参数的构造函数。讨论这个设计策略的优点和缺点。</p>\n</blockquote>\n<p>如果我们编写了这样一个构造函数：<br><strong>优点</strong>:没有任何构造函数能隐式地创建StrBlob对象，代码将更清晰。<br><strong>缺点</strong>:总是需要构造临时的StrBlob对象。另外地，不能使用拷贝初始化。使用起来不方便<br>&nbsp;<br>&nbsp;</p>\n<h1 id=\"nbsp-12-1-2节练习\"><a href=\"#nbsp-12-1-2节练习\" class=\"headerlink\" title=\"&nbsp;12.1.2节练习\"></a>&nbsp;12.1.2节练习</h1><h2 id=\"nbsp-练习12-6\"><a href=\"#nbsp-练习12-6\" class=\"headerlink\" title=\"&nbsp;练习12.6\"></a>&nbsp;练习12.6</h2><blockquote>\n<p>编写函数，返回一个动态分配的 int 的 vector。将此 vector 传递给另一个函数，这个函数读取标准输入，将读入的值保存在 vector　元素中。再将 vector 传递给另一个函数，打印读入的值。记得在恰当的时刻delete vector。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>;\t\t<span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>; </div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec_make()</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &#123; &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; i) </div><div class=\"line\">\t\tiVec-&gt;push_back(i);</div><div class=\"line\">\t<span class=\"keyword\">return</span> iVec;\t</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : *iVec)</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">cout</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">auto</span> vec = read(iVec_make());</div><div class=\"line\">\tprint(vec) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t<span class=\"keyword\">delete</span> vec;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"nbsp-练习12-7\"><a href=\"#nbsp-练习12-7\" class=\"headerlink\" title=\"&nbsp;练习12.7\"></a>&nbsp;练习12.7</h2><blockquote>\n<p>重做上一题，这次使用shared_ptr而不是内置指针。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>;\t\t<span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>; </div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec_make()</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">std</span>::make_shared&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; ();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; i) </div><div class=\"line\">\t\tiVec-&gt;push_back(i);</div><div class=\"line\">\t<span class=\"keyword\">return</span> iVec;\t</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;* iVec)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : *iVec)</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">cout</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">auto</span> vec = read( iVec_make() );</div><div class=\"line\">\tprint(vec) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"nbsp-练习12-8\"><a href=\"#nbsp-练习12-8\" class=\"headerlink\" title=\"&nbsp;练习12.8\"></a>&nbsp;<strong>练习12.8</strong></h2><blockquote>\n<p>下面的函数是否有错误？如果有，解释错误原因。<br>bool b() {<br>int *p = new int;<br>// …<br>return p;<br>}</p>\n</blockquote>\n<p>有错误。p由指针类型转换为布尔类型，程序没办法释放这片分配的动态内存。导致内存泄露问题。若返回类型是<strong> int* </strong>，那么调用者可以释放内存。</p>\n<h2 id=\"nbsp-练习12-9\"><a href=\"#nbsp-练习12-9\" class=\"headerlink\" title=\"&nbsp;练习12.9\"></a>&nbsp;练习12.9</h2><blockquote>\n<p>解释下面代码执行的结果<br>int q = new int(42), r - new int(100);<br>r = q;<br>auto q2 = make_shared(42), r2 = make_shared(100);<br>r2 = q2;</p>\n</blockquote>\n<ul>\n<li>q和r指向同一块动态分配的内存，没有指针指向另一块动态分配的内存，导致内存泄漏问题。</li>\n<li><em>r2 = q2</em> 使q2的引用计数递增为２，r2的引用计数递减为０。结果是之前给r2分配的内存自动地被释放。这代码是安全的。<br>&nbsp;<br>&nbsp;<h1 id=\"nbsp-12-1-3节练习\"><a href=\"#nbsp-12-1-3节练习\" class=\"headerlink\" title=\"&nbsp;12.1.3节练习\"></a>&nbsp;12.1.3节练习</h1><h2 id=\"nbsp-练习12-10\"><a href=\"#nbsp-练习12-10\" class=\"headerlink\" title=\"&nbsp;练习12.10\"></a>&nbsp;练习12.10</h2></li>\n</ul>\n<blockquote>\n<p>下面的代码调用了第413页定义的process函数，解释此调用是否正确。如果不正确，应如何修改?<br>shared_ptr p(new int(42));<br>process(shared_ptr (p));<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process</span> <span class=\"params\">(<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; ptr)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"in process,ptr.use_count = \"</span> &lt;&lt; ptr.use_count() &lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p1 (<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">42</span>));</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"before process,p1.use_count = \"</span> &lt;&lt; p1.use_count() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\tprocess (<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; (p1));</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"after process,p1.use_count = \"</span> &lt;&lt; p1.use_count() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">   </div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>输出结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">aphro@7559:~$ ./a</div><div class=\"line\">before process,p1.use_count = 1</div><div class=\"line\"><span class=\"keyword\">in</span> process,ptr.use_count = 2</div><div class=\"line\">after process,p1.use_count = 1</div></pre></td></tr></table></figure>\n<p>调用是正确的，创建临时对象<em>shared_ptr (p)</em>时递增了p的引用计数。</p>\n<h2 id=\"nbsp-练习12-11\"><a href=\"#nbsp-练习12-11\" class=\"headerlink\" title=\"&nbsp;练习12.11\"></a>&nbsp;练习12.11</h2><blockquote>\n<p>如果我们像下面这样调用 process，会发生什么?<br>process (shared_ptr(p.get()));</p>\n</blockquote>\n<p>p指向的内存在process()函数结束时被自动释放,再次使用p将发生未定义的行为。而且当p被销毁时，这块内存上发生double free。</p>\n<h2 id=\"nbsp-练习12-12\"><a href=\"#nbsp-练习12-12\" class=\"headerlink\" title=\"&nbsp;练习12.12\"></a>&nbsp;练习12.12</h2><blockquote>\n<p>p和sp的定义如下，对于接下来的对process的每个调用，如果合法，解释它做了什么，如果不合法，解释其错误原因：<br>auto p = new int();<br>auto sp = make_shared\\<int\\> ();</int\\></p>\n<ul>\n<li>process(sp);</li>\n<li>process(new int());</li>\n<li>process(p);</li>\n<li>process(shared_ptr (p));</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>合法，拷贝sp会递增其引用计数，在process中引用计数为2。</p>\n</li>\n<li><p>不合法，接受指针参数的智能指针构造函数是explicit的。不能将一个内置指针隐式地转换为一个智能指针。</p>\n</li>\n<li><p>不合法，理由同２。</p>\n</li>\n<li><p>虽然合法，但容易出问题，比如<em>double free</em>。</p>\n</li>\n</ul>\n<h2 id=\"nbsp-练习12-13\"><a href=\"#nbsp-练习12-13\" class=\"headerlink\" title=\"&nbsp;练习12.13\"></a>&nbsp;练习12.13</h2><blockquote>\n<p>如果执行下面的代码，会发生什么?<br>auto sp = make_shared\\<int\\> ();<br>auto p = sp.get();<br>delete p;</int\\></p>\n</blockquote>\n<p>delete p后，sp成了空悬指针，若再次使用sp，将会发生未定义的行为。并且，当sp被销毁时，这块内存会被第二次delete。<br>&nbsp;<br>&nbsp;</p>\n","categories":["C++"],"tags":["C++ Primer"]},{"title":"Linux升级内核时/boot空间不足解决办法","url":"http://yuncry.me/2016/11/05/Linux升级内核时-boot空间不足解决办法/","content":"<blockquote>\n<p>今天安装更新时，系统提示我/boot空间已满。内核文件默认储存在/boot中，多次升级内核后，内核版本太多，清理没有的内核文件就行。</p>\n</blockquote>\n<h2 id=\"首先看一下磁盘情况\"><a href=\"#首先看一下磁盘情况\" class=\"headerlink\" title=\"首先看一下磁盘情况\"></a>首先看一下磁盘情况</h2><p>输入　<strong>df -h</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ df -h</div><div class=\"line\">文件系统        容量  已用  可用 已用% 挂载点</div><div class=\"line\">udev            3.9G     0  3.9G    0% /dev</div><div class=\"line\">tmpfs           786M  9.6M  777M    2% /run</div><div class=\"line\">/dev/sda6        29G  6.9G   20G   26% /</div><div class=\"line\">tmpfs           3.9G  221M  3.7G    6% /dev/shm</div><div class=\"line\">tmpfs           5.0M  4.0K  5.0M    1% /run/lock</div><div class=\"line\">tmpfs           3.9G     0  3.9G    0% /sys/fs/cgroup</div><div class=\"line\">/dev/sda8       181M  172M     0  100% /boot</div><div class=\"line\">/dev/sda9       260G   22G  225G    9% /home</div><div class=\"line\">/dev/sda1        96M   29M   68M   30% /boot/efi</div><div class=\"line\">tmpfs           786M   64K  786M    1% /run/user/1000</div></pre></td></tr></table></figure></p>\n<p>/boot已用100％需要清理了。</p>\n<h2 id=\"查看当前使用的内核版本号\"><a href=\"#查看当前使用的内核版本号\" class=\"headerlink\" title=\"查看当前使用的内核版本号\"></a>查看当前使用的内核版本号</h2><p>输入　<strong>uname -a</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ uname <span class=\"_\">-a</span></div><div class=\"line\">Linux 7559 4.4.0-38-generic <span class=\"comment\">#57-Ubuntu SMP Tue Sep 6 15:42:33 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></div></pre></td></tr></table></figure></p>\n<p>当前内核版本号4.4.0-38</p>\n<h2 id=\"删除旧内核\"><a href=\"#删除旧内核\" class=\"headerlink\" title=\"删除旧内核\"></a>删除旧内核</h2><p>输入　<strong>sudo apt-get remove linux-image-　　</strong>接着按两下<em>Tab</em>将显示当前储存的所有内核版本，把之前的版本删除就行。<strong>刚升级的版本可能不稳定，为了保险保留之前1-2版本备用。</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get remove linux-image-</div><div class=\"line\">linux-image-4.4.0-36-generic        linux-image-extra-4.4.0-36-generic</div><div class=\"line\">linux-image-4.4.0-38-generic        linux-image-extra-4.4.0-38-generic</div><div class=\"line\">linux-image-4.4.0-45-generic        linux-image-generic</div><div class=\"line\">aphro@7559:~$ sudo apt-get remove linux-image-4.4.0-36-generic </div><div class=\"line\">[sudo] aphro 的密码： </div><div class=\"line\">正在读取软件包列表... 完成</div><div class=\"line\">正在分析软件包的依赖关系树 </div><div class=\"line\">正在读取状态信息... 完成 </div><div class=\"line\">下列软件包是自动安装的并且现在不需要了：</div><div class=\"line\">  linux-headers-4.4.0-36 linux-headers-4.4.0-36-generic</div><div class=\"line\">  使用<span class=\"string\">'sudo apt autoremove'</span>来卸载它(它们)。</div><div class=\"line\">  下列软件包将被【卸载】：</div><div class=\"line\">   linux-image-4.4.0-36-generic linux-image-extra-4.4.0-36-generic</div><div class=\"line\">   linux-signed-image-4.4.0-36-generic</div><div class=\"line\">   升级了 0 个软件包，新安装了 0 个软件包，要卸载 3 个软件包，有 136 个软件包未被升级。</div><div class=\"line\">   有 5 个软件包没有被完全安装或卸载。</div><div class=\"line\">   解压缩后将会空出 218 MB 的空间。</div><div class=\"line\">   您希望继续执行吗？ [Y/n] Y</div></pre></td></tr></table></figure></p>\n<h2 id=\"再次查看-boot分区容量\"><a href=\"#再次查看-boot分区容量\" class=\"headerlink\" title=\"再次查看/boot分区容量\"></a>再次查看/boot分区容量</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ df -h</div><div class=\"line\">文件系统        容量  已用  可用 已用% 挂载点</div><div class=\"line\">udev            3.9G     0  3.9G    0% /dev</div><div class=\"line\">tmpfs           786M  9.6M  777M    2% /run</div><div class=\"line\">/dev/sda6        29G  6.6G   21G   25% /</div><div class=\"line\">tmpfs           3.9G  243M  3.6G    7% /dev/shm</div><div class=\"line\">tmpfs           5.0M  4.0K  5.0M    1% /run/lock</div><div class=\"line\">tmpfs           3.9G     0  3.9G    0% /sys/fs/cgroup</div><div class=\"line\">/dev/sda8       181M  119M   49M   71% /boot</div><div class=\"line\">/dev/sda9       260G   22G  225G    9% /home</div><div class=\"line\">/dev/sda1        96M   29M   68M   30% /boot/efi</div><div class=\"line\">tmpfs           786M   64K  786M    1% /run/user/1000</div></pre></td></tr></table></figure>\n","categories":["CS"],"tags":["Linux"]},{"title":"about","url":"http://yuncry.me/about/index.html","content":"<p>　　 </p>\n<p><font size=\"5\">Evan, 1997, winter.</font><br>　<br><i class=\"fa fa-user\"></i> Nickname:&nbsp;&nbsp;&nbsp;yuncry<br><i class=\"fa fa-envelope\"></i> Email:&nbsp;&nbsp;&nbsp;yuncry.hu@foxmail.com<br><i class=\"fa fa-map-marker\"></i> 北京</p>\n","categories":[],"tags":[]},{"title":"history","url":"http://yuncry.me/history/index.html","content":"<p>　　　<br>　　<br><em>2016.11.03</em><br>开始使用github和hexo搭建个人博客。</p>\n","categories":[],"tags":[]}]